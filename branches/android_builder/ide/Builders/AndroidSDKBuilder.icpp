#include "Builders.h"

// Hardcoded paths.
String sdkPath = "/home/klugier/AndroidStudio/sdk";
String sdkPlatform = "";
String jdkPath = "/usr/lib/jvm/java-8-oracle";

String AndroidSDKBuilder::GetTargetExt() const
{
	return ".apk";
}

bool AndroidSDKBuilder::BuildPackage(const String& packageName, Vector<String>& linkfile,
	                                 Vector<String>&, String& linkoptions,
	                                 const Vector<String>& all_uses,
	                                 const Vector<String>& all_libraries,
	                                 int)
{
	bool error = false;
	
	String packagePath = PackagePath(packageName);
	String packageDir = GetFileFolder(packagePath);
	
	ChDir(packageDir);
	PutVerbose("cd " + packageDir);
	
	Package package;
	package.Load(packagePath);
	
	bool isAndroidManifest = false;
	Vector<String> packageSourceFiles; // <- Paths releated to project
	Vector<String> sourceFiles; // <- Paths releated to operating system
	Vector<String> sourceObjectFiles; // <- Objects file paths
	Vector<String> sourceOptions;
	for(int i = 0; i < package.GetCount(); i++) {
		if(!IdeIsBuilding())
			return false;
		if(!package[i].separator) {
			// TODO: add global options aka gop support
			Vector<String> allPackageFiles = CustomStep(package[i], packageName, error);
			if(!allPackageFiles.GetCount())
				error = true;
			for (int j = 0; j < allPackageFiles.GetCount(); j++) {
				String filePath = allPackageFiles[j];
				String fileExt = ToLower(GetFileExt(filePath));
				
				if(fileExt == ".java") {
					// TODO: how to handle project source (aka. "java") dir tree.
					String packageFile = AppendFileName(packageName, package[i]);
					String objectFile = NativePath(CatAnyPath(outdir, packageFile));
					
					packageSourceFiles.Add(packageFile);
					sourceFiles.Add(filePath);
					sourceObjectFiles.Add(objectFile);
				}
				else
				if(fileExt == ".xml") {
					if(package[i] == "AndroidManifest.xml")
						isAndroidManifest = true;
				}
			}
		}
	}
	
	if(!isAndroidManifest) {
		PutConsole("Package " + packageName + " dosen't contain Android manifest file (\"AndroidManifest.xml\").");
		return false;
	}
	
	if (!GenerateRFile(packageDir))
		return false;
	
	// TODO: do we need to add R.java to source files???
	
	if(!error && HasFlag("MAIN") && !sourceFiles.IsEmpty()) {
		String objectsDir = GetFileFolder(target) + DIR_SEPS + packageName + DIR_SEPS + "obj";
		String linkcmd;
		
		if(!RealizeDirectory(objectsDir)) {
			PutConsole("Creating directory " + objectsDir + " failed.");
			return false;
		}
		
		PutConsole(outdir);
		
		linkcmd << JavacPath() << " ";
		linkcmd << "-d "<< objectsDir <<  " ";
		linkcmd << "-classpath " << PlatformDir() << DIR_SEPS << "android.jar" << JavacDelimiter() << objectsDir << " ";
		linkcmd << "-sourcepath " << packageDir << DIR_SEPS << "java ";
		for(int i = 0; i < sourceFiles.GetCount(); i++) {
			linkcmd << sourceFiles[i];
			if(i < sourceFiles.GetCount() - 1)
				linkcmd << " ";
		}
		
		linkoptions = linkcmd;
	}
	
	return !error;
}

// linkfile
// linkoptions - compilation command
bool AndroidSDKBuilder::Link(const Vector<String>& linkfile, const String& linkoptions,
	                         bool createmap)
{
	StringStream ss;
	
	PutConsole("Linkoptions: " + linkoptions);
	int time = GetTickCount();
	PutConsole("Compiling...");
	if(Execute(linkoptions, ss) != 0) {
		PutConsole(ss.GetResult());
		return false;
	}
	PutVerbose("compiled in " + GetPrintTime(time));
	
	return false;
}

bool AndroidSDKBuilder::PreprocesAndroidManifest()
{
	// TODO: use XML module to get important information from manifest file.
	
	return true;
}

bool AndroidSDKBuilder::GenerateRFile(const String& packageDir)
{
	// PutConsole("Creating R file of - " + packageDir);
	
	StringStream ss;
	int result = Execute(AaptPath() + " package -v -f -m " +
	                     "-S " + packageDir + DIR_SEPS + "res " +
	                     "-J " + packageDir + DIR_SEPS + "java " +
	                     "-M " + packageDir + DIR_SEPS + "AndroidManifest.xml " +
	                     "-I " + PlatformDir() + DIR_SEPS + "android.jar", ss);
	
	// PutConsole(ss.GetResult());
	
	if(result != 0)
		PutConsole("Finish creating R file with error code: " + IntStr(result));
	
	return result == 0;
}

String AndroidSDKBuilder::BuildToolsDir() const
{
	return sdkPath + DIR_SEPS + "build-tools/19.1.0";
}

String AndroidSDKBuilder::PlatformDir() const
{
	// TODO: platform detection
	return sdkPath + DIR_SEPS + "platforms/android-22";
}

String AndroidSDKBuilder::AaptPath() const
{
	// TODO: build tools detection
	return BuildToolsDir() + DIR_SEPS + "aapt";
}

String AndroidSDKBuilder::DxPath() const
{
	return "";
}

String AndroidSDKBuilder::JavacPath() const
{
	return jdkPath + DIR_SEPS + "bin" + DIR_SEPS + "javac";
}

String AndroidSDKBuilder::JavacDelimiter() const
{
#if defined(PLATFORM_WIN32) || defined(PLATFORM_WIN64)
	return ";";
#else
	return ":";
#endif
}

Builder *CreateAndroidSDKBuilder()
{
	return new AndroidSDKBuilder();
}

INITBLOCK
{
	RegisterBuilder("Android_SDK", &CreateAndroidSDKBuilder);
}
