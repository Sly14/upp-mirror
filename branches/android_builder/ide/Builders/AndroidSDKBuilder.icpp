#include "Builders.h"

// Hardcoded paths.
static String sdkPath = "/home/klugier/AndroidStudio/sdk";
static String jdkPath = "/usr/lib/jvm/java-7-oracle";

AndroidSDKBuilder::AndroidSDKBuilder() :
	androidSDK(sdkPath)
{
	
}

String AndroidSDKBuilder::GetTargetExt() const
{
	return ".apk";
}

bool AndroidSDKBuilder::BuildPackage(const String& package, Vector<String>& linkfile,
	                                 Vector<String>&, String& linkoptions,
	                                 const Vector<String>& all_uses,
	                                 const Vector<String>& all_libraries,
	                                 int)
{
	// Cout() << "Package: " << package << " ,Outdir: " << outdir << "\n"; 
	
	const bool isMainPackage = HasFlag("MAIN");
	const bool isResourcesPackage = HasFlag("ANDROID_RESOURCES_PACKAGE");
	String uppManifestPath = PackagePath(package);
	String packageDir = GetFileFolder(uppManifestPath);
	
	ChDir(packageDir);
	PutVerbose("cd " + packageDir);
	
	Package pkg;
	pkg.Load(uppManifestPath);
	
	if(!isResourcesPackage)
		if(!RealizePackageSourcesDirectory(package))
			return false;
	
	Vector<String> packageSourceFiles; // <- Paths releated to project
	Vector<String> sourceFiles; // <- Paths releated to operating system
	Vector<String> javaSourceFiles;
	Vector<String> sourceObjectFiles; // <- Objects file paths
	Vector<String> sourceOptions;
	bool error = false;
	String androidManifestPath;
	for(int i = 0; i < pkg.GetCount(); i++) {
		if(!IdeIsBuilding())
			return false;
		if(!pkg[i].separator) {
			// TODO: add global options aka gop support
			Vector<String> allPackageFiles = CustomStep(pkg[i], package, error);
			if(!allPackageFiles.GetCount())
				error = true;
			for(int j = 0; j < allPackageFiles.GetCount(); j++) {
				String filePath = allPackageFiles[j];
				String fileExt = ToLower(GetFileExt(filePath));
				String fileName = GetFileName(allPackageFiles[j]);
				String packageFile = AppendFileName(package, pkg[i]);
				String packageFileDirectory = GetFileFolder(packageFile);
				packageFileDirectory.Find(package + DIR_SEPS);
				
				if(isResourcesPackage) {
					// To keep compatibility with pure Android SDK.
					if(packageFileDirectory.Find(package + DIR_SEPS) != -1)
						packageFileDirectory.Remove(0, String(package + DIR_SEPS).GetCount());
					String filePathInAndroidProject;
					filePathInAndroidProject << GetAndroidProjectResourcesDir() << DIR_SEPS;
					filePathInAndroidProject <<	packageFileDirectory << DIR_SEPS;
					filePathInAndroidProject <<	fileName;
					
					if(!MovePackageFileToAndroidProject(filePath, filePathInAndroidProject))
						error = true;
				}
				else
				if(fileExt == ".java") {
					String filePathInAndroidProject;
					filePathInAndroidProject << GetAndroidProjectSourcesDir() << DIR_SEPS;
					filePathInAndroidProject <<	packageFileDirectory << DIR_SEPS;
					filePathInAndroidProject <<	fileName;
					
					if(!MovePackageFileToAndroidProject(filePath, filePathInAndroidProject)) {
						error = true;
						continue;
					}
					javaSourceFiles.Add(filePathInAndroidProject);
				}
				else
				if(fileExt == ".xml") {
					if(isMainPackage && fileName == "AndroidManifest.xml") {
						if(androidManifestPath.GetCount()) {
							PutConsole("AndroidManifest.xml is duplicated.");
							return false;
						}
						
						if(!FileCopy(filePath, GetAndroidProjectDir() + DIR_SEPS + "AndroidManifest.xml")) {
							error = true;
							continue;
						}
						androidManifestPath = filePath;
					}
				}
			}
		}
	}
	
	if(isMainPackage && androidManifestPath.IsEmpty()) {
		PutConsole("Failed to find Android manifest file. Make sure you have got following file AndroidManifest.xml in your main package.");
		return false;
	}
	
	if(!isResourcesPackage && !error && !javaSourceFiles.IsEmpty()) {
		if(!RealizeDirectory(GetAndroidProjectClassesDir()))
			return false;
		
		String compileCmd;
		compileCmd << JavacPath();
		compileCmd << (HasFlag("DEBUG") ? " -g" : " -g:none");
		compileCmd << " -d "<< GetAndroidProjectClassesDir();
		compileCmd << " -classpath " << androidSDK.AndroidJarPath() << JavacDelimiter() << GetAndroidProjectBuildDir();
		compileCmd << " -sourcepath " << GetAndroidProjectSourcesDir() << " ";
		for(int i = 0; i < javaSourceFiles.GetCount(); i++) {
			compileCmd << javaSourceFiles[i];
			if(i < javaSourceFiles.GetCount() - 1)
				compileCmd << " ";
		}
		
		linkfile.Add(compileCmd);
	}

	return !error;
}

bool AndroidSDKBuilder::Link(const Vector<String>& linkfile, const String& linkoptions,
	                         bool createmap)
{
	StringStream ss;
	if(!GenerateRFile())
		return false;
	
	// We need to compile java packages in this place, because we need to generate "R.java" file before...
	// We don't know which packages contain resources.
	PutConsole("Compiling java sources...");
	bool error = false;
	int time = GetTickCount();
	for(int i = 0; i < linkfile.GetCount(); i++) {
		if(Execute(linkfile[i], ss) != 0) {
			PutConsole(ss.GetResult());
			error = true;
			break;
		}
	}
	if(error)
		return false;
	
	PutConsole("Creating dex file...");
	RealizeDirectory(GetAndroidProjectBinDir());
	String dxCmd;
	dxCmd << androidSDK.DxPath() << " --dex ";
	dxCmd << "--output=" << GetAndroidProjectBinDir() << DIR_SEPS << "classes.dex ";
	dxCmd << GetAndroidProjectClassesDir();
	// PutConsole(dxCmd);
	if(Execute(dxCmd, ss) != 0) {
		PutConsole(ss.GetResult());
		return false;
	}
	
	PutConsole("Creating apk file...");
	String unsignedApkPath = GetAndroidSandboxDir() + DIR_SEPS + GetFileTitle(target) + ".unsigned.apk";
	String signedApkPath = GetAndroidSandboxDir() + DIR_SEPS + GetFileTitle(target) + ".signed.apk";
	DeleteFile(unsignedApkPath);
	String apkCmd;
	apkCmd << androidSDK.AaptPath() << " package -v -f";
	if(DirectoryExists(GetAndroidProjectResourcesDir()))
		apkCmd << " -S " << GetAndroidProjectResourcesDir();
	apkCmd << " -M " << GetAndroidProjectDir() << DIR_SEPS << "AndroidManifest.xml";
	apkCmd << " -I " << androidSDK.AndroidJarPath();
	apkCmd << " -F " << unsignedApkPath;
	apkCmd << " " << GetAndroidProjectBinDir();
	// PutConsole(apkCmd);
	if(Execute(apkCmd, ss) != 0) {
		PutConsole(ss.GetResult());
		return false;
	}
	
	// In release mode we definitly shouldn't signing apk!!!
	if(HasFlag("DEBUG")) {
		String debugKeystorePath = GetAndroidSandboxDir() + DIR_SEPS + "debug.keystore";
		if(!FileExists(debugKeystorePath)) { 
			PutConsole("Generating debug key...");
			String keytoolCmd;
			keytoolCmd << KeytoolPath() << " -genkeypair -alias androiddebugkey -keypass android"; 
			keytoolCmd << " -keystore " << debugKeystorePath;
			keytoolCmd << " -storepass android -dname \"CN=Android Debug,O=Android,C=US\" -validity 10000";
			//PutConsole(keytoolCmd);
			if(Execute(keytoolCmd, ss) != 0) {
				PutConsole(ss.GetResult());
				return false;
			}
		}
	
		PutConsole("Signing apk file...");
		DeleteFile(signedApkPath);
		String jarsignerCmd;
		jarsignerCmd << JarsignerPath();
		jarsignerCmd << " -keystore " + debugKeystorePath;
		jarsignerCmd << " -storepass android";
		jarsignerCmd << " -keypass android";
		jarsignerCmd << " -signedjar " << signedApkPath;
		jarsignerCmd << " " << unsignedApkPath;
		jarsignerCmd << " androiddebugkey";
		//PutConsole(jarsignerCmd);
		if(Execute(jarsignerCmd, ss) != 0) {
			PutConsole(ss.GetResult());
			return false;
		}
	}
	
	// TODO: should we align unsigned apk???
	PutConsole("Aliging apk file...");
	DeleteFile(target);
	String zipalignCmd;
	zipalignCmd << androidSDK.ZipalignPath() << " -v -f 4 ";
	zipalignCmd << (HasFlag("DEBUG") ? signedApkPath : unsignedApkPath) << " ";
	zipalignCmd << target;
	//PutConsole(zipalignCmd);
	if(Execute(zipalignCmd, ss) != 0) {
		PutConsole(ss.GetResult());
		return false;
	}
	
	return true;
}

void AndroidSDKBuilder::CleanPackage(const String& package)
{
	CppBuilder::CleanPackage(package);
	
	String sandboxDir = GetAndroidSandboxDir();
	Cout() << "Sandbox: " << sandboxDir << "\n";
	if(DirectoryExists(sandboxDir))
		DeleteFolderDeep(sandboxDir);
}

bool AndroidSDKBuilder::MovePackageFileToAndroidProject(const String& packagePath, const String& androidProjectPath)
{
	if(!RealizeDirectory(GetFileDirectory(androidProjectPath)))
		return false;
	return FileCopy(packagePath, androidProjectPath);
}

bool AndroidSDKBuilder::RealizePackageSourcesDirectory(const String& packageName)
{
	return RealizeDirectory(GetAndroidProjectSourcesDir() + DIR_SEPS + packageName);
}

bool AndroidSDKBuilder::PreprocesAndroidManifest()
{
	// TODO: use XML module to get important information from manifest file.
	
	return true;
}

bool AndroidSDKBuilder::GenerateRFile()
{
	// TODO: gen in gen folder
	if(DirectoryExists(GetAndroidProjectResourcesDir())) {
		StringStream ss;
		String aaptCommand;
		aaptCommand << androidSDK.AaptPath() << " package -v -f -m";
		aaptCommand << " -S " << GetAndroidProjectDir() << DIR_SEPS << "res";
		aaptCommand << " -J " << GetAndroidProjectDir() << DIR_SEPS << "java";
		aaptCommand << " -M " << GetAndroidProjectDir() << DIR_SEPS << "AndroidManifest.xml";
		aaptCommand << " -I " << androidSDK.AndroidJarPath();
		
		if(Execute(aaptCommand, ss) != 0) {
			PutConsole(ss.GetResult());
			return false;
		}
	}
	
	return true;
}

// -------------------------------------------------------------------

String AndroidSDKBuilder::GetAndroidSandboxDir() const
{
	if(target.IsEmpty())
		return String();
		
	int targetExtLen = GetTargetExt().GetCount();
	String mainPackageName = GetFileName(target);
	mainPackageName.Remove(mainPackageName.GetCount() - targetExtLen, targetExtLen);
	return GetFileFolder(target) + DIR_SEPS + "Sandbox" + DIR_SEPS + mainPackageName;
}

String AndroidSDKBuilder::GetAndroidProjectDir() const
{
	return GetAndroidSandboxDir() + DIR_SEPS + "AndroidProject";
}

String AndroidSDKBuilder::GetAndroidProjectSourcesDir() const
{
	return GetAndroidProjectDir() + DIR_SEPS + "java";
}

String AndroidSDKBuilder::GetAndroidProjectResourcesDir() const
{
	return GetAndroidProjectDir() + DIR_SEPS + "res";
}

String AndroidSDKBuilder::GetAndroidProjectBuildDir() const
{
	return GetAndroidProjectDir() + DIR_SEPS + "build";
}

String AndroidSDKBuilder::GetAndroidProjectClassesDir() const
{
	return GetAndroidProjectBuildDir() + DIR_SEPS + "classes";
}

String AndroidSDKBuilder::GetAndroidProjectBinDir() const
{
	return GetAndroidProjectBuildDir() + DIR_SEPS + "bin";
}

// -------------------------------------------------------------------

String AndroidSDKBuilder::JavacPath() const
{
	return jdkPath + DIR_SEPS + "bin" + DIR_SEPS + "javac";
}

String AndroidSDKBuilder::JarsignerPath() const
{
	return jdkPath + DIR_SEPS + "bin" + DIR_SEPS + "jarsigner";
}

String AndroidSDKBuilder::KeytoolPath() const
{
	return jdkPath + DIR_SEPS + "bin" + DIR_SEPS + "keytool";
}

// -------------------------------------------------------------------

String AndroidSDKBuilder::JavacDelimiter() const
{
#if defined(PLATFORM_WIN32) || defined(PLATFORM_WIN64)
	return ";";
#else
	return ":";
#endif
}

Builder *CreateAndroidSDKBuilder()
{
	return new AndroidSDKBuilder();
}

INITBLOCK
{
	RegisterBuilder("Android_SDK", &CreateAndroidSDKBuilder);
}
