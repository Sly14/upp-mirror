#!/bin/bash

#setup some variables, paths, etc. first:

#upp server setting guesses:
THEIDE="/home/upp/bin/theide"			# where is theide executable
SRC_PATH="/home/upp/upp.tmp/u"	# where to look for sources
BM="GCCMK"						# what build method to use
ASEMBLY="uppsrc"				# just in case we wan't to build from different assembly
SVN_PATH="/home/upp/upp.src"	# path to svn working copy
VER="`svnversion $SVN_PATH`"	# this is obvious, isn't it?
BUILD="1"						# increment this when building version which is already in launchpad (BUGGY! do not touch, please)
GPG_PROG="/home/upp/bin/gpg-extpass"	# what program to use for signing (in this case a wrapper that supplies passphrase)
GPG_KEY="0CE4194D"				# gpg key fingerprint to use
TMPDIR="/home/upp/lpbuild.tmp"	# directory for temporary files (defaults to /tmp/lpbuild.tmp)
SERIES=( hardy intrepid jaunty karmic lucid )

# my local setup (for debuging)
#THEIDE="/usr/bin/theide" 
#SRC_PATH="/media/data/temp/uppsvn"
#SVN_PATH="$SRC_PATH"
#BM="GCC"
#ASEMBLY="uppsrc-svn"
#VER="`svnversion $SVN_PATH`"
#VER="2285"
#BUILD="1"
#GPG_PROG="/usr/bin/gpg-extpass"
#GPG_KEY="E0962C7A"
#TMPDIR=""	# use default
#SERIES=( karmic )

echo "Checking whether gpg-agent is running..."
if test -f $HOME/.gpg-agent-info &&
   kill -0 'cut -d: -f 2 $HOME/.gpg-agent-info' 2>/dev/null; then
     GPG_AGENT_INFO='cat $HOME/.gpg-agent-info'
     export GPG_AGENT_INFO
     echo "...it is"
else
     echo "Starting gpg-agent"
     eval 'gpg-agent --daemon'
     echo $GPG_AGENT_INFO >$HOME/.gpg-agent-info
fi

echo "Debian source package builder"
echo "written by Jan Dolinar (dolik.rce), 2010"

# setup some variables for later
if [ -z "$TMPDIR" ]
then
	tmpdir="/tmp/lpbuild.tmp"
else
	tmpdir="$TMPDIR"
fi
tmp=$tmpdir/upp-$VER
orig="$tmpdir/upp_$VER.orig.tar.gz"
scriptpath="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")" #not from my head:-)
scriptdir=`dirname "$scriptpath"`
subfolders=( uppsrc examples tutorial reference bazaar )

# clean up temporary files
if [ -d $tmpdir ]
then
	echo "Cleaning up previous run..."
	rm -rf $tmpdir
fi

# create dir for sources
mkdir $tmpdir
mkdir $tmp
cd $tmp

# copy source files to tmp folder
#    rsync takes care about .svn subdirs 
echo -n "copying sources:"
for folder in ${subfolders[@]}
do
	echo -n " $folder"
	rsync -rl --exclude '.svn' $SRC_PATH/$folder $tmp > /dev/null
done
echo

# create Makefile for theide
echo "Creating makefile ..."
$THEIDE $ASEMBLY ide $BM ">GUI,MT" -srxM $tmp/uppsrc

# get changelog from svn
echo "Creating changelog ..."
cd $SRC_PATH
svn --limit 100 --xml -v log $SVN_PATH|python $scriptdir/svn2log.py \
-u $scriptdir/users.lst -P upp -L -d ultimatepp.org -S all -p /trunk/ \
-i "`echo ${subfolders[@]} |tr \" \" ,`" -o $tmp/changelog

# Patch the version.h for curent version
echo "#define IDE_VERSION \"$VER\"" > $tmp/uppsrc/ide/version.h

# compress the sources and Makefile to get orig.tar.gz
echo "Compressing original source tarball ..."
cd $tmp
tar -czf $orig ${subfolders[@]} #Makefile 

# prepare architecture independent part of debian directory:
echo "Debianizing source tree ..."
mkdir $tmp/debian

# copy maintainer scripts and control file
cp $scriptdir/{postinst,prerm,control,rules,theide.desktop,theide.1} $tmp/debian
chmod +x $scriptdir/{postinst,prerm,rules}

# generate copyrightfile
cat > $tmp/debian/copyright << EOF
This package was debianized by Jan Dolinar <dolik.rce@seznam.cz>
on `date -R`.

Copyright Â© 1999-2010 Ultimate++ team (http://ultimatepp.org)
Authors: Mirek Fidler, Tomas Rylek, Daniel Kos

License: BSD (please see /usr/share/common-licenses/BSD).
EOF

# cycle through $SERIES and prepare the architecture depedent files
for dist in ${SERIES[@]}
do
	version=$VER"~ppa"$BUILD"~"$dist"1"

	# save complete version string to ide/version.h
	echo "#define IDE_VERSION \"$version\"" > $tmp/uppsrc/ide/version.h

	# generate changelog (with changes in packaging, not in sources!)
	cat > "$tmp/debian/changelog" << EOF
upp ($version) $dist; urgency=low

  * Updated to version $VER

 -- Jan Dolinar <dolik.rce@seznam.cz>  `date -R`
EOF

	# generate debian/dopack script
	cat > "$tmp/debian/dopack" << EOF
#!/bin/bash

VERSION="$VER"
MAINTAINER="Jan Dolinar"
EMAIL="dolik.rce@seznam.cz"
SERIES="$dist"
BUILD="$BUILD"
release="$version"
EOF
	cat "$scriptdir/dopack-stub" >> $tmp/debian/dopack

	# call debuild to create the package
	echo "Packaging upp $version ..."
	cd $tmp
	debuild --no-lintian -k$GPG_KEY -m'Jan Dolinar <dolik.rce@seznam.cz>' -sgpg -p$GPG_PROG -S
	
	# upload to launchpad ("-s"=simulate, use for debugging)
	echo "Uploading upp $version ..."
	cd $tmpdir
	dput "upp-$dist" "upp_"$version"_source.changes"

	# remove architecture dependent files
	rm $tmp/debian/{dopack,changelog}
done

echo "FINISHED!"
