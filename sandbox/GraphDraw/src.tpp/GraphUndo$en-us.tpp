topic "GraphUndo";
[2 $$0,0#00000000000000000000000000000000:Default]
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[{_}%EN-US 
[s0; &]
[ {{10000@(113.42.0) [s0; [*@7;4 Class GraphUndo]]}}&]
[s4;%- &]
[s1;:GraphUndo`:`:class:%- [@(0.0.255)3 class][3 _][*3 GraphUndo]&]
[s2; Manages UNDO/REDO stacks storing [%-^topic`:`/`/GraphDraw`/src`/GraphUndo`$en`-us`#GraphUndoData`:`:class^ G
raphUndoData] objects.&]
[s2; &]
[s2; It also monitors the duration between the addition two Undo 
actions in order to merge undo actions if they are very close 
in time : T < 500ms .&]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Member List]]}}&]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Public Method List]]}}&]
[s4;%- &]
[s5;:GraphUndo`:`:AddUndoAction`(GraphUndoData`&`):%- [@(0.0.255) void]_[* AddUndoAction](
[_^GraphUndoData^ GraphUndoData][@(0.0.255) `&]_[*@3 CB])&]
[s2; Add an UNDO/REDO action to the undo stack&]
[s2;  [%-*@3 CB] : undo/redo action to add.&]
[s3; &]
[s4;%- &]
[s5;:GraphUndo`:`:Undo`(`):%- [@(0.0.255) bool]_[* Undo]()&]
[s2; [@(128.0.255) Execute ]the first undo action in [@(128.0.255) Undo 
stack]&]
[s2; Returns [* TRUE ]if an [* undo ]action was executed&]
[s3;%- &]
[s4;%- &]
[s5;:GraphUndo`:`:Redo`(`):%- [@(0.0.255) bool]_[* Redo]()&]
[s2; [@(128.0.255) Execute ]the first redo action in [@(128.0.255) Redo 
stack]&]
[s2; Returns [* TRUE ]if an [* redo ]action was executed&]
[s3;%- &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Constructor detail]]}}&]
[s0; &]
[s0; &]
[s0; &]
[s0; &]
[s0; &]
[s0; &]
[ {{10000@(113.42.0) [s0; [*@7;4 Class GraphUndoData]]}}&]
[s4;%- &]
[s1;:GraphUndoData`:`:class:%- [@(0.0.255)3 class][3 _][*3 GraphUndoData]&]
[s2; Contains UNDO/REDO data based on CALLBACKS.&]
[s2; The use of Callbacks to store undo/redo actions wakes it generic&]
[s3;%- &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Member List]]}}&]
[s4;%- &]
[s5;:GraphUndoData`:`:undoAction:%- [_^Callback^ Callback]_[* undoAction]&]
[s2; [@(128.0.255) Restores ][*@(128.0.255) previous ][@(128.0.255) state] 
when executed.&]
[s3;%- &]
[s4;%- &]
[s5;:GraphUndoData`:`:redoAction:%- [_^Callback^ Callback]_[* redoAction]&]
[s2; [@(128.0.255) Restores ][*@(128.0.255) next ][@(128.0.255) state] 
when executed.&]
[s3;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Public Method List]]}}&]
[s4;%- &]
[s5;:GraphUndoData`:`:Merge`(const GraphUndoData`&`):%- [@(0.0.255) void]_[* Merge]([_^GraphUndoData^ G
raphUndoData][@(0.0.255) `&]_[*@3 mostRecentAction])&]
[s2;  [%-*@3 mostRecentAction ]: action to merge with ( this actions 
MUST be younger than the current one ).&]
[s2; &]
[s2; Merges two UNDO/REDO actions in one consistent action.&]
[s2; This allows merging of actions that were done very quickly and 
for which we don`'t wan`'t to see all the details when doiing 
undo.&]
[s3; &]
[s4;%- &]
[s5;:GraphUndo`:`:AddUndoAction`(GraphUndoData`&`):%- [@(0.0.255) void]_[* AddUndoAction](
[_^GraphUndoData^ GraphUndoData][@(0.0.255) `&]_[*@3 CB])&]
[s2; Add an UNDO/REDO action to the undo stack&]
[s2;  [%-*@3 CB] : undo/redo action to add.&]
[s3; &]
[s4;%- &]
[s5;:GraphUndo`:`:Undo`(`):%- [@(0.0.255) void]_[* Undo]()&]
[s2; [@(128.0.255) Execute ]the first undo action in [@(128.0.255) Undo 
stack]&]
[s3;%- &]
[s4;%- &]
[s5;:GraphUndo`:`:Redo`(`):%- [@(0.0.255) void]_[* Redo]()&]
[s2; [@(128.0.255) Execute ]the first redo action in [@(128.0.255) Redo 
stack]&]
[s3;%- &]
[s0;%- &]
[ {{10000F(128)G(128)@1 [s0; [* Constructor detail]]}}&]
[s0; &]
[s0; &]
[s0; ]]