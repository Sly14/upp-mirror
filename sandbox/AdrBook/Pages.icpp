#include "AdrBook.h"

SKYLARK(Picture, "person/*/picture")
{
	http.Content("image/jpeg", LoadFile(ConfigFile(http[0] + ".data")));
}

Tuple2<int, int> Pagination(Http& http, int total)
{
	int perpage = minmax(http.Int("perpage"), 10, 250);
	int pages = total / perpage;
	int page = Nvl(http.Int("page"));
	ValueArray pg;
	for(int i = 0; i < pages; i++)
		pg.Add(i);
	http("PAGES", pg);
	return MakeTuple(page * perpage, perpage);
}

void Persons(Http& http)
{
	ValueArray person;
	SqlBool where;
	String s = http["search"];
	if(!IsNull(s)) {
		s << '%';
		where = Like(FIRSTNAME, s) || Like(LASTNAME, s) || Like(EMAIL, s);
	}
	Tuple2<int, int> pg = Pagination(http, int(SQL % Select(SqlCountRows()).From(PERSON).Where(where)));
	ValueMap vm;
	Sql sql;
	sql * Select(ID, FIRSTNAME, LASTNAME, EMAIL, SEX)
	      .From(PERSON)
	      .Where(where)
	      .OrderBy(LASTNAME)
	      .Limit(pg.a, pg.b);
	while(sql.Fetch(vm)) {
		vm.Add("HASPICTURE", FileExists(ConfigFile(AsString(sql[ID]) + ".data")));
		person.Add(vm);
	}
	http("PERSON", person);
};

SKYLARK(HomePage, "index.html")
{
	Persons(http);
	http.RenderResult("AdrBook/Index");
}

SKYLARK(SetLanguage, "setlanguage/*")
{
	int lang = LNGFromText(http[0]);
	DDUMP(lang);
	DDUMP(LNGAsText(lang));
	if(lang)
		http.SetLanguage(lang);
	http.Redirect(HomePage);
}

SKYLARK(SetPerPage, "ajax/perpage/*")
{
	http.SessionSet("perpage", Nvl(http.Int(0), 10));
	Persons(http);
	http.UxRender("persons", "AdrBook/Persons")
	    .UxRender("pagination", "AdrBook/pagination");
}

SKYLARK(SetPage, "ajax/setpage/*")
{
	http.SessionSet("page", Nvl(http.Int(0), 10));
	Persons(http);
	http.UxRender("persons", "AdrBook/Persons");
}

SKYLARK(AjaxCreate, "ajax/create:POST")
{
	SQL * http.Insert(PERSON);
	Persons(http);
	http.UxRender("persons", "AdrBook/Persons")
	    .UxRender("pagination", "AdrBook/pagination")
	    .UxSetValue("firstname", Null)
	    .UxSetValue("lastname", Null)
	;
}

SKYLARK(NotFound, "**")
{
	http.Redirect(HomePage);
}

SKYLARK(InsertTestData, "testdata")
{
	static const char *name[] = {
		"John", "Smith", "Calamity", "Jane", "Carl", "Gustav", "Barack", "Obama",
		"Bush", "Clinton", "Dave", "Tiger", "Woods", "Sombody", "Else"
	};
	SQL * Delete(PERSON).Where(SqlBool::True());
	for(int i = 0; i < 100; i++)
		SQL * Insert(PERSON)
				(FIRSTNAME, name[Random(__countof(name))])
				(LASTNAME, name[Random(__countof(name))])
				(EMAIL, String().Cat() << name[Random(__countof(name))] << "@mail.com")
				(SEX, Random(2) == 0 ? "M" : "F")
		;
	http.Redirect(HomePage);
}

SKYLARK(SubmitNew, "submit:POST")
{
	SQL * http.Insert(PERSON);
/*
	SQL * Insert(PERSON)
			(FIRSTNAME, http["firstname"])
			(LASTNAME, http["lastname"])
			(EMAIL, http["email"])
			(SEX, http["sex"])
	;
*/
	SaveFile(ConfigFile(AsString(SQL.GetInsertedId()) + ".data"), http["file"]);
	http.Redirect(HomePage);
}

SKYLARK(New, "new")
{
	http("ACTION", SubmitNew).RenderResult("AdrBook/Dialog");
}

SKYLARK(SubmitEdit, "submit/edit/*:POST_RAW")
{
	int id = http.Int(0);
	SQL * http.Update(PERSON).Where(ID == atoi(http[0]));
/*
	SQL * Update(PERSON)
			(FIRSTNAME, http["firstname"])
			(LASTNAME, http["lastname"])
			(EMAIL, http["email"])
			(SEX, http["sex"])
			.Where(ID == atoi(http[0]));
	;
*/
	String file = http["file"];
	if(file.GetCount())
		SaveFile(ConfigFile(AsString(id) + ".data"), file);
	http.Redirect(HomePage);
}

SKYLARK(Edit, "person/*/edit")
{
	int id = http.Int(0);
	Sql sql;
	sql * Select(FIRSTNAME, LASTNAME, EMAIL, SEX)
	      .From(PERSON)
	      .Where(ID == id);
	if(!sql.Fetch()) {
		http.Redirect(HomePage);
		return;
	}
	http
		("ID", id)
		(sql)
		("ACTION", SubmitEdit, id)
	.RenderResult("AdrBook/Dialog");
}

SKYLARK(Delete, "person/*/delete")
{
	SQL * Delete(PERSON).Where(ID == atoi(http[0]));
	DeleteFile(ConfigFile(atoi(http[0]) + ".data"));
	http.Redirect(HomePage);
}

SKYLARK(AjaxTest, "ajax/*")
{
	http.Ux("ajax_id", "AJAX response: " + AsString(4 * Nvl(http.Int(0))));
}
