#include "Skylark.h"

Value Cycle(const Vector<Value>& arg, Renderer *)
{
	if(arg.GetCount() < 3 && !IsNumber(arg[0]))
		return String();
	return arg[1 + int(arg[0]) % (arg.GetCount() - 1)];
}

Value RawFn(const Vector<Value>& arg, Renderer *)
{
	RawHtmlText r;
	for(int i = 0; i < arg.GetCount(); i++)
		r.text.Cat(AsString(arg[i]));
	return RawToValue(r);
}

String GetIdentity(Renderer *r)
{
	Http *http = dynamic_cast<Http *>(r);
	if(!http)
		throw Exc("invalid POST identity call");
	String s = (*http)["__identity__"];
	if(s.GetCount())
		return s;
	s = AsString(Uuid::Create());
	http->SessionSet("__identity__", s);
	return s;
}

Value PostIdentity(const Vector<Value>&, Renderer *r)
{
	return Raw("<input type=\"hidden\" name=\"__post_identity__\" value=\"" + GetIdentity(r) + "\">");
}

Value JsIdentity(const Vector<Value>&, Renderer *r)
{
	return Raw("<script type=\"text/javascript\">var __js_identity__ = \"" + GetIdentity(r) + "\"</script>");
}

INITBLOCK {
	Compiler::Register("cycle", Cycle);
	Compiler::Register("raw", RawFn);
	Compiler::Register("post_identity", PostIdentity);
	Compiler::Register("js_identity", JsIdentity);
};
