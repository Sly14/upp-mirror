enum_property ElementPosition {
	"GraphDraw_ns::LEFT_OF_GRAPH",
	"GraphDraw_ns::RIGHT_OF_GRAPH",
	"GraphDraw_ns::TOP_OF_GRAPH",
	"GraphDraw_ns::BOTTOM_OF_GRAPH",
	"GraphDraw_ns::OVER_GRAPH"
};


enum_property ElementSidePosition {
	"GraphDraw_ns::LEFT_OF_GRAPH",
	"GraphDraw_ns::RIGHT_OF_GRAPH",
	"GraphDraw_ns::TOP_OF_GRAPH",
	"GraphDraw_ns::BOTTOM_OF_GRAPH"
};

enum_property ElementXPosition {
	"GraphDraw_ns::LEFT_OF_GRAPH",
	"GraphDraw_ns::RIGHT_OF_GRAPH"
};

enum_property ElementYPosition {
	"GraphDraw_ns::TOP_OF_GRAPH",
	"GraphDraw_ns::BOTTOM_OF_GRAPH"
};


//enum_property DrawMode {
//	"MODE_ANTIALIASED",
//	"MODE_NOAA",
//	"MODE_SUBPIXEL"
//};

enum_property DrawMode {
	"GraphDraw_ns::MD_DRAW",
	"GraphDraw_ns::MD_ANTIALIASED",
	"GraphDraw_ns::MD_NOAA",
	"GraphDraw_ns::MD_SUBPIXEL"
};


enum_property AxisScaleType {
	"GraphGConv::AXIS_SCALE_STD",
	"GraphGConv::AXIS_SCALE_LOG",
	"GraphGConv::AXIS_SCALE_POW10"
};


enum_property AxisTextFormat {
	"GraphDraw_ns::AXIS_TEXT_FORMAT_STD",
	"GraphDraw_ns::AXIS_TEXT_FORMAT_LOG",
	"GraphDraw_ns::AXIS_TEXT_FORMAT_DATE",
	"GraphDraw_ns::AXIS_TEXT_FORMAT_TIME"
};




fn GD_DrawAxis(w, side, axisRect, ticks, axisWidth, axisColor, axisTextFont, axisTextColor, tickColor)
{
	switch(side)
	{
		case "GraphDraw_ns::BOTTOM_OF_GRAPH":
			if ( axisColor != Null ) w.DrawLine( axisRect.left, axisRect.top, axisRect.right , axisRect.top, axisWidth, axisColor );
			if ( tickColor != Null ) {
				for(i = 0; i < count(ticks); i++) w.DrawLine( ticks[i], axisRect.top-3, ticks[i] , axisRect.top+3, 2, tickColor );
			}
			if ( axisTextColor != Null ) {
				for(i = 0; i < count(ticks); i++) {
					txt = to_string( i*100 );
					textsize = GetTextSize( txt , axisTextFont);
					orig = Point(ticks[i]-(textsize.cx/2), axisRect.top+6);
					w.DrawText( orig.x, orig.y, txt, axisTextFont, axisTextColor);
				}
			}
			break;
		case "GraphDraw_ns::LEFT_OF_GRAPH":
			if ( axisColor != Null ) w.DrawLine( axisRect.right, axisRect.bottom, axisRect.right , axisRect.top, axisWidth, axisColor );
			if ( tickColor != Null ) {
				for(i = 0; i < count(ticks); i++) w.DrawLine( axisRect.right-3, ticks[i], axisRect.right+3, ticks[i], 2, tickColor );
			}
			if ( axisTextColor != Null ) {
				for(i = 0; i < count(ticks); i++) {
					txt = to_string( i*100 );
					textsize = GetTextSize( txt , axisTextFont);
					orig = Point(axisRect.right-6-textsize.cx, ticks[i]-(textsize.cy/2));
					w.DrawText( orig.x, orig.y, txt, axisTextFont, axisTextColor);
				}
			}
			break;
		case "GraphDraw_ns::RIGHT_OF_GRAPH":
			if ( axisColor != Null ) w.DrawLine( axisRect.left, axisRect.bottom, axisRect.left , axisRect.top, axisWidth, axisColor );
			if ( tickColor != Null ) {
				for(i = 0; i < count(ticks); i++) w.DrawLine( axisRect.left-3, ticks[i], axisRect.left+3, ticks[i], 2, tickColor );
			}
			if ( axisTextColor != Null ) {
				for(i = 0; i < count(ticks); i++) {
					txt = to_string( i*100 );
					textsize = GetTextSize( txt , axisTextFont);
					orig = Point(axisRect.left+6, ticks[i]-(textsize.cy/2));
					w.DrawText( orig.x, orig.y, txt, axisTextFont, axisTextColor);
				}
			}
			break;
		case "GraphDraw_ns::TOP_OF_GRAPH":
			if ( axisColor != Null ) w.DrawLine( axisRect.left, axisRect.bottom, axisRect.right , axisRect.bottom, axisWidth, axisColor );
			if ( tickColor != Null ) {
				for(i = 0; i < count(ticks); i++) w.DrawLine( ticks[i], axisRect.bottom-3, ticks[i] , axisRect.bottom+3, 2, tickColor );
			}
			if ( axisTextColor != Null ) {
				for(i = 0; i < count(ticks); i++) {
					txt = to_string( i*100 );
					textsize = GetTextSize( txt , axisTextFont);
					orig = Point(ticks[i]-(textsize.cx/2), axisRect.bottom-6-textsize.cy);
					w.DrawText( orig.x, orig.y, txt, axisTextFont, axisTextColor);
				}
			}
			break;

	}
}


fn GD_DrawGrid(w, plotRect, xticks, yticks, xColor, yColor )
{
	if ( xColor != Null ) {
		for(i = 1; i < count(xticks); i++) {
			w.DrawLine( xticks[i], plotRect.top, xticks[i] , plotRect.bottom, 1, xColor );
		}
	}

	if ( yColor != Null ) {
		for(i = 1; i < count(xticks); i++) {
			w.DrawLine( plotRect.left, yticks[i], plotRect.right, yticks[i], 1, yColor );
		}
	}
}
/*
fn GD_DrawGrid(w, plotRect, xticks, yticks, xColor, yColor )
{
	if ( xColor != Null ) {
		for(i = 1; i < count(xticks); i++) {
			w.DrawLine( xticks[i], plotRect.top, xticks[i] , plotRect.bottom, 1, xColor );
		}
	}

	if ( yColor != Null ) {
		for(i = 1; i < count(xticks); i++) {
			w.DrawLine( plotRect.left, yticks[i], plotRect.right, yticks[i], 1, yColor );
		}
	}
}
*/
fn GD_DrawGraphic(w, plotRect, color )
{
	dx = ( plotRect.right-plotRect.left )/5;
	dy = ( plotRect.bottom-plotRect.top )/5;
	x = plotRect.left;
	y = plotRect.top;
	y1 = y+4*dy;
	w.DrawLine(x, y, x+dx, y1, 2, color);
	x += dx; y = y1; y1 = y-3*dy;
	w.DrawLine(x, y, x+dx, y1, 2, color);
	x += dx; y = y1;
	w.DrawLine(x, y, x+dx, y1, 2, color);
	x += dx; y = y1; y1 = y+2*dy;
	w.DrawLine(x, y, x+dx, y1, 2, color);
	x += dx; y = y1; y1 = y-2*dy;
	w.DrawLine(x, y, x+dx, y1, 2, color);
}


fn GD_DrawLabelElement(w, side, rect, txt, color, font)
{
	if ( color != Null ) {
		center = Point( (rect.left+rect.right)/2,  (rect.top+rect.bottom)/2);
		textsize = GetTextSize( txt , font);
		//w.DrawRect( rect, :Yellow);
		switch(side)
		{
			case "GraphDraw_ns::TOP_OF_GRAPH":
			case "GraphDraw_ns::BOTTOM_OF_GRAPH":
					orig = Point( center.x - (textsize.cx/2), center.y -(textsize.cy/2) );
					w.DrawText( orig.x, orig.y, txt, font, color);
				break;
			case "GraphDraw_ns::RIGHT_OF_GRAPH":
					orig = Point( center.x + (textsize.cy/2), center.y -(textsize.cx/2) );
					w.DrawText( orig.x, orig.y, 2700, txt, font, color);
				break;
			case "GraphDraw_ns::LEFT_OF_GRAPH":
					orig = Point( center.x - (textsize.cy/2), center.y +(textsize.cx/2) );
					w.DrawText( orig.x, orig.y, 900, txt, font, color);
				break;
		}
	}
}


fn GD_DrawLegendElement(w, side, rect, bckGndcolor, font)
{
	if (bckGndcolor != Null) w.DrawRect( rect, bckGndcolor );
	txt = "Legend";
	center = Point( (rect.left+rect.right)/2,  (rect.top+rect.bottom)/2);
	textsize = GetTextSize( txt , font);
	orig = Point( center.x - (textsize.cx/2), center.y -(textsize.cy/2) );
	w.DrawText( orig.x, orig.y, txt, font, :Blue);
}



fn GD_AddElementFrame(side, &fromRect, width)
{
	res = fromRect;
	switch(side) {
		case "GraphDraw_ns::TOP_OF_GRAPH":
			res.bottom = res.top+width;
			fromRect.top = res.bottom;
			break;
		case "GraphDraw_ns::BOTTOM_OF_GRAPH":
			res.top = res.bottom-width;
			fromRect.bottom = res.top;
			break;
		case "GraphDraw_ns::LEFT_OF_GRAPH":
			res.right = res.left+width;
			fromRect.left = res.right;
			break;
		case "GraphDraw_ns::RIGHT_OF_GRAPH":
			res.left = res.right-width;
			fromRect.right = res.left;
			break;
	}
	return res;
}

fn GD_AdjustElementFrame(side, plotRect, &elem)
{
	xCenter = (plotRect.left + plotRect.right)/2;
	yCenter = (plotRect.top + plotRect.bottom)/2;
	switch (side) {
		case "GraphDraw_ns::TOP_OF_GRAPH":
		case "GraphDraw_ns::BOTTOM_OF_GRAPH":
			elem.left = plotRect.left;
			elem.right = plotRect.right;
			break;
		case "GraphDraw_ns::LEFT_OF_GRAPH":
		case "GraphDraw_ns::RIGHT_OF_GRAPH":
			elem.top = plotRect.top;
			elem.bottom = plotRect.bottom;
			break;
	}
}




subctrl GraphDraw {
	Frame  SetFrame @1;
	int SetTopMargin    = 10;
	int SetBottomMargin = 0;
	int SetLeftMargin   = 0;
	int SetRightMargin  = 15;
	Color SetCtrlBackgroundColor = White;
	Color SetPlotBackgroundColor = LtGray;
	DrawMode SetDrawMode = MODE_ANTIALIASED;
	int SetCopyRatio = 3;
	
	GetMinSize() { sz = Size(60, 50); return sz; }
	GetStdSize() { sz = Size(280, 180); return sz; }
};

subctrl GraphDraw_XAxisParams {
	bool   HideXAxis = false;
	int SetXAxisRectWidth = 25;
	AxisScaleType SetXScaleType = GraphGConv::AXIS_SCALE_STD;
	AxisTextFormat SetXAxisFormatType = GraphDraw_ns::AXIS_TEXT_FORMAT_STD;
	int   SetXAxisWidth = 2;
	Color SetXGridColor = Gray;
	Color SetXAxisColor = Blue;
	Color SetXAxisTextColor = Blue;
	Font  SetXAxisTextFont = StdFont();
	Color SetXAxisTickColor = Red;
	double SetXMin = 0;
	double SetXMax = 100;
	double SetXMinRangeLimit;
	double SetXMaxRangeLimit;
};

subctrl GraphDraw_YAxisParams {
	bool   HideYAxis = false;
	int SetYAxisRectWidth = 40;
	AxisScaleType SetYScaleType = GraphGConv::AXIS_SCALE_STD;
	AxisTextFormat SetYAxisFormatType = GraphDraw_ns::AXIS_TEXT_FORMAT_STD;
	int   SetYAxisWidth = 2;
	Color SetYGridColor = Gray;
	Color SetYAxisColor = Blue;
	Color SetYAxisTextColor = Blue;
	Font  SetYAxisTextFont = StdFont();
	Color SetYAxisTickColor = Red;
	double SetYMin = 0;
	double SetYMax = 100;
	double SetYMinRangeLimit;
	double SetYMaxRangeLimit;
};

subctrl GraphDraw_Y2AxisParams {
	bool   HideY2Axis = false;
	int SetY2AxisRectWidth = 40;
	AxisScaleType SetY2ScaleType = GraphGConv::AXIS_SCALE_STD;
	AxisTextFormat SetY2AxisFormatType = GraphDraw_ns::AXIS_TEXT_FORMAT_STD;
	int   SetY2AxisWidth = 2;
	Color SetY2GridColor = Null;
	Color SetY2AxisColor = Blue;
	Color SetY2AxisTextColor = Blue;
	Font  SetY2AxisTextFont = StdFont();
	Color SetY2AxisTickColor = Red;
	double SetY2Min = 0;
	double SetY2Max = 100;
	double SetY2MinRangeLimit;
	double SetY2MaxRangeLimit;
};

subctrl GraphDraw_TitleParams {
	bool   HideTitle = false;
	int    SetTitleWidth = 40;
	ElementSidePosition SetTitlePosition = GraphDraw_ns::TOP_OF_GRAPH;
	Text   SetTitle = "TITLE";
	Font   SetTitleFont = StdFontZ(20).Bold().Underline();
	Color  SetTitleColor = Red;
};

subctrl GraphDraw_LegendParams {
	bool   HideLegend = false;
	int    SetLegendWidth = 30;
	ElementPosition SetLegendPosition = GraphDraw_ns::OVER_GRAPH;
	int    SetLegendXSize = 80;
	int    SetLegendYSize = 30;
	int    SetLegendXPos = 40;
	int    SetLegendYPos = 20;
	Color  SetLegendBckgndColor = Yellow;
	Font   SetLegendFont = StdFont();
};

subctrl GraphDraw_XLabelParams {
	bool   HideXLabel = false;
	int    SetXLabelWidth = 30;
	Text   SetXLabel = "X Axis label";
	Font   SetXLabelFont = StdFontZ(15).Bold();
	Color  SetXLabelColor = Green;
}

subctrl GraphDraw_YLabelParams {
	bool   HideYLabel = false;
	int    SetYLabelWidth = 30;
	Text   SetYLabel = "Y Axis label";
	Font   SetYLabelFont = StdFontZ(15).Bold();
	Color  SetYLabelColor = Green;
}

subctrl GraphDraw_Y2LabelParams {
	bool   HideY2Label = false;
	int    SetY2LabelWidth = 30;
	Text   SetY2Label = "Y2 Axis label";
	Font   SetY2LabelFont = StdFontZ(15).Bold();
	Color  SetY2LabelColor = Green;
}


ctrl XY_GraphCtrl {
	group "Extra";
	> GraphDraw;
	> GraphDraw_XAxisParams;
	> GraphDraw_YAxisParams;


	Paint(w) {
		r = GetRect();
		if ( .SetCtrlBackgroundColor != Null ) w.DrawRect(r, .SetCtrlBackgroundColor);
		DrawCtrlFrame(w, r, .SetFrame);

		plotRect = r;
		
		GD_AddElementFrame( "GraphDraw_ns::TOP_OF_GRAPH",    plotRect, .SetTopMargin );
		GD_AddElementFrame( "GraphDraw_ns::BOTTOM_OF_GRAPH", plotRect, .SetBottomMargin );
		GD_AddElementFrame( "GraphDraw_ns::LEFT_OF_GRAPH",   plotRect, .SetLeftMargin );
		GD_AddElementFrame( "GraphDraw_ns::RIGHT_OF_GRAPH",  plotRect, .SetRightMargin );

//		legendFrame = RectC(.SetLegendXPos, .SetLegendYPos, .SetLegendXSize, .SetLegendYSize);
//		if ( !.HideLegend  && (.SetLegendPosition!= "GraphDraw_ns::OVER_GRAPH" )) {
//			legendFrame = GD_AddElementFrame( .SetLegendPosition,  plotRect, .SetLegendWidth );
//		}

		xAxisSide = "GraphDraw_ns::BOTTOM_OF_GRAPH";
		yAxisSide = "GraphDraw_ns::LEFT_OF_GRAPH";
		if ( !.HideXAxis ) xAxisFrame = GD_AddElementFrame( xAxisSide, plotRect, .SetXAxisRectWidth );
		if ( !.HideYAxis ) yAxisFrame = GD_AddElementFrame( yAxisSide, plotRect, .SetYAxisRectWidth );

//		GD_AdjustElementFrame(.SetLegendPosition, plotRect, legendFrame);
		GD_AdjustElementFrame(xAxisSide, plotRect, xAxisFrame);
		GD_AdjustElementFrame(yAxisSide, plotRect, yAxisFrame);

		if ( .SetPlotBackgroundColor != Null ) w.DrawRect(plotRect, .SetPlotBackgroundColor);
		
		tk = (plotRect.right - plotRect.left)/8;
		st = plotRect.left;
		xticks = [st, st+tk, st+tk*2, st+tk*3, st+tk*4, st+tk*5, st+tk*6, st+tk*7, st+tk*8 ];

		tk = (plotRect.bottom - plotRect.top)/8;
		st = plotRect.bottom;
		yticks = [st, st-tk, st-tk*2, st-tk*3, st-tk*4, st-tk*5, st-tk*6, st-tk*7, st-tk*8 ];

		GD_DrawGrid(w, plotRect, xticks, yticks, .SetXGridColor, .SetYGridColor);
		if ( !.HideXAxis ) GD_DrawAxis(w, xAxisSide, xAxisFrame, xticks, .SetXAxisWidth, .SetXAxisColor, .SetXAxisTextFont, .SetXAxisTextColor, .SetXAxisTickColor);
		if ( !.HideYAxis ) GD_DrawAxis(w, yAxisSide, yAxisFrame, yticks, .SetYAxisWidth, .SetYAxisColor, .SetYAxisTextFont, .SetYAxisTextColor, .SetYAxisTickColor);
		GD_DrawGraphic(w, plotRect, :Red);
//		if (!.HideLegend) GD_DrawLegendElement(w, .SetLegendPosition, legendFrame, .SetLegendBckgndColor, .SetLegendFont );
	}
};


ctrl XYY2_GraphCtrl {
	group "Extra";
	> GraphDraw;
	> GraphDraw_LegendParams;
	> GraphDraw_XAxisParams;
	> GraphDraw_YAxisParams;
	> GraphDraw_Y2AxisParams;


	Paint(w) {
		r = GetRect();
		if ( .SetCtrlBackgroundColor != Null ) w.DrawRect(r, .SetCtrlBackgroundColor);
		DrawCtrlFrame(w, r, .SetFrame);

		plotRect = r;
		
		GD_AddElementFrame( "GraphDraw_ns::TOP_OF_GRAPH",    plotRect, .SetTopMargin );
		GD_AddElementFrame( "GraphDraw_ns::BOTTOM_OF_GRAPH", plotRect, .SetBottomMargin );
		GD_AddElementFrame( "GraphDraw_ns::LEFT_OF_GRAPH",   plotRect, .SetLeftMargin );
		GD_AddElementFrame( "GraphDraw_ns::RIGHT_OF_GRAPH",  plotRect, .SetRightMargin );

		legendFrame = RectC(.SetLegendXPos, .SetLegendYPos, .SetLegendXSize, .SetLegendYSize);
		if ( !.HideLegend  && (.SetLegendPosition!= "GraphDraw_ns::OVER_GRAPH" )) {
			legendFrame = GD_AddElementFrame( .SetLegendPosition,  plotRect, .SetLegendWidth );
		}

		xAxisSide = "GraphDraw_ns::BOTTOM_OF_GRAPH";
		yAxisSide = "GraphDraw_ns::LEFT_OF_GRAPH";
		y2AxisSide = "GraphDraw_ns::RIGHT_OF_GRAPH";
		if ( !.HideXAxis )  xAxisFrame = GD_AddElementFrame( xAxisSide, plotRect, .SetXAxisRectWidth );
		if ( !.HideYAxis )  yAxisFrame = GD_AddElementFrame( yAxisSide, plotRect, .SetYAxisRectWidth );
		if ( !.HideY2Axis ) y2AxisFrame = GD_AddElementFrame( y2AxisSide, plotRect, .SetYAxisRectWidth );

		GD_AdjustElementFrame(.SetLegendPosition, plotRect, legendFrame);
		GD_AdjustElementFrame(xAxisSide, plotRect, xAxisFrame);
		GD_AdjustElementFrame(yAxisSide, plotRect, yAxisFrame);
		GD_AdjustElementFrame(y2AxisSide, plotRect, y2AxisFrame);

		if ( .SetPlotBackgroundColor != Null ) w.DrawRect(plotRect, .SetPlotBackgroundColor);
		
		tk = (plotRect.right - plotRect.left)/8;
		st = plotRect.left;
		xticks = [st, st+tk, st+tk*2, st+tk*3, st+tk*4, st+tk*5, st+tk*6, st+tk*7, st+tk*8 ];

		tk = (plotRect.bottom - plotRect.top)/8;
		st = plotRect.bottom;
		yticks = [st, st-tk, st-tk*2, st-tk*3, st-tk*4, st-tk*5, st-tk*6, st-tk*7, st-tk*8 ];

		tk = (plotRect.bottom - plotRect.top)/7;
		st = plotRect.bottom;
		y2ticks = [st, st-tk, st-tk*2, st-tk*3, st-tk*4, st-tk*5, st-tk*6, st-tk*7 ];

		GD_DrawGrid(w, plotRect, xticks, yticks, .SetXGridColor, .SetYGridColor);
		if ( !.HideXAxis )  GD_DrawAxis(w, xAxisSide, xAxisFrame, xticks, .SetXAxisWidth, .SetXAxisColor, .SetXAxisTextFont, .SetXAxisTextColor, .SetXAxisTickColor);
		if ( !.HideYAxis )  GD_DrawAxis(w, yAxisSide, yAxisFrame, yticks, .SetYAxisWidth, .SetYAxisColor, .SetYAxisTextFont, .SetYAxisTextColor, .SetYAxisTickColor);
		if ( !.HideY2Axis ) GD_DrawAxis(w, y2AxisSide, y2AxisFrame, y2ticks, .SetY2AxisWidth, .SetY2AxisColor, .SetY2AxisTextFont, .SetY2AxisTextColor, .SetY2AxisTickColor);
		GD_DrawGraphic(w, plotRect, :Red);
		if (!.HideLegend) GD_DrawLegendElement(w, .SetLegendPosition, legendFrame, .SetLegendBckgndColor, .SetLegendFont );
	}
};

ctrl XYLT_GraphCtrl {
	group "Extra";
	> GraphDraw;
	> GraphDraw_TitleParams;
	> GraphDraw_LegendParams;
	> GraphDraw_XLabelParams;
	> GraphDraw_XAxisParams;
	> GraphDraw_YLabelParams;
	> GraphDraw_YAxisParams;

	Paint(w) {
		r = GetRect();
		if ( .SetCtrlBackgroundColor != Null ) w.DrawRect(r, .SetCtrlBackgroundColor);
		DrawCtrlFrame(w, r, .SetFrame);

		plotRect = r;

		GD_AddElementFrame( "GraphDraw_ns::TOP_OF_GRAPH",    plotRect, .SetTopMargin );
		GD_AddElementFrame( "GraphDraw_ns::BOTTOM_OF_GRAPH", plotRect, .SetBottomMargin );
		GD_AddElementFrame( "GraphDraw_ns::LEFT_OF_GRAPH",   plotRect, .SetLeftMargin );
		GD_AddElementFrame( "GraphDraw_ns::RIGHT_OF_GRAPH",  plotRect, .SetRightMargin );
		
		if (! .HideTitle) titleFrame = GD_AddElementFrame( .SetTitlePosition, plotRect, .SetTitleWidth );

		legendFrame = RectC(.SetLegendXPos, .SetLegendYPos, .SetLegendXSize, .SetLegendYSize);
		if ( !.HideLegend  && (.SetLegendPosition!= "GraphDraw_ns::OVER_GRAPH" )) {
			legendFrame = GD_AddElementFrame( .SetLegendPosition,  plotRect, .SetLegendWidth );
		}

		xAxisSide = "GraphDraw_ns::BOTTOM_OF_GRAPH";
		yAxisSide = "GraphDraw_ns::LEFT_OF_GRAPH";
		if (! .HideXLabel) xLabelFrame = GD_AddElementFrame( xAxisSide, plotRect, .SetXLabelWidth );
		if ( !.HideXAxis ) xAxisFrame = GD_AddElementFrame( xAxisSide, plotRect, .SetXAxisRectWidth );
		
		if (! .HideYLabel) yLabelFrame = GD_AddElementFrame( yAxisSide, plotRect, .SetYLabelWidth );
		if ( !.HideYAxis ) yAxisFrame = GD_AddElementFrame( yAxisSide, plotRect, .SetYAxisRectWidth );
		

		GD_AdjustElementFrame(.SetTitlePosition, plotRect, titleFrame);
		GD_AdjustElementFrame(.SetLegendPosition, plotRect, legendFrame);
		GD_AdjustElementFrame(xAxisSide, plotRect, xAxisFrame);
		GD_AdjustElementFrame(xAxisSide, plotRect, xLabelFrame);
		GD_AdjustElementFrame(yAxisSide, plotRect, yAxisFrame);
		GD_AdjustElementFrame(yAxisSide, plotRect, yLabelFrame);

		if ( .SetPlotBackgroundColor != Null ) w.DrawRect(plotRect, .SetPlotBackgroundColor);
		
		tk = (plotRect.right - plotRect.left)/8;
		st = plotRect.left;
		xticks = [st, st+tk, st+tk*2, st+tk*3, st+tk*4, st+tk*5, st+tk*6, st+tk*7, st+tk*8 ];

		tk = (plotRect.bottom - plotRect.top)/8;
		st = plotRect.bottom;
		yticks = [st, st-tk, st-tk*2, st-tk*3, st-tk*4, st-tk*5, st-tk*6, st-tk*7, st-tk*8 ];

		GD_DrawGrid(w, plotRect, xticks, yticks, .SetXGridColor, .SetYGridColor);
		if ( !.HideXAxis ) GD_DrawAxis(w, xAxisSide, xAxisFrame, xticks, .SetXAxisWidth, .SetXAxisColor, .SetXAxisTextFont, .SetXAxisTextColor, .SetXAxisTickColor);
		if ( !.HideYAxis ) GD_DrawAxis(w, yAxisSide, yAxisFrame, yticks, .SetYAxisWidth, .SetYAxisColor, .SetYAxisTextFont, .SetYAxisTextColor, .SetYAxisTickColor);
		GD_DrawGraphic(w, plotRect, :Red);
		
		if (!.HideXLabel) GD_DrawLabelElement( w, xAxisSide, xLabelFrame, .SetXLabel, .SetXLabelColor, .SetXLabelFont );
		if (!.HideYLabel) GD_DrawLabelElement( w, yAxisSide, yLabelFrame, .SetYLabel, .SetYLabelColor, .SetYLabelFont );
		if (!.HideTitle)  GD_DrawLabelElement(w, .SetTitlePosition, titleFrame, .SetTitle, .SetTitleColor, .SetTitleFont );
		if (!.HideLegend) GD_DrawLegendElement(w, .SetLegendPosition, legendFrame, .SetLegendBckgndColor, .SetLegendFont );
	}
};


ctrl XYY2LT_GraphCtrl {
	group "Extra";
	> GraphDraw;
	> GraphDraw_TitleParams;
	> GraphDraw_LegendParams;
	> GraphDraw_XLabelParams;
	> GraphDraw_XAxisParams;
	> GraphDraw_YLabelParams;
	> GraphDraw_YAxisParams;
	> GraphDraw_Y2LabelParams;
	> GraphDraw_Y2AxisParams;

	Paint(w) {
		r = GetRect();
		if ( .SetCtrlBackgroundColor != Null ) w.DrawRect(r, .SetCtrlBackgroundColor);
		DrawCtrlFrame(w, r, .SetFrame);

		plotRect = r;

		GD_AddElementFrame( "GraphDraw_ns::TOP_OF_GRAPH",    plotRect, .SetTopMargin );
		GD_AddElementFrame( "GraphDraw_ns::BOTTOM_OF_GRAPH", plotRect, .SetBottomMargin );
		GD_AddElementFrame( "GraphDraw_ns::LEFT_OF_GRAPH",   plotRect, .SetLeftMargin );
		GD_AddElementFrame( "GraphDraw_ns::RIGHT_OF_GRAPH",  plotRect, .SetRightMargin );
		
		if (! .HideTitle) titleFrame = GD_AddElementFrame( .SetTitlePosition, plotRect, .SetTitleWidth );
		
		legendFrame = RectC(.SetLegendXPos, .SetLegendYPos, .SetLegendXSize, .SetLegendYSize);
		if ( !.HideLegend  && (.SetLegendPosition!= "GraphDraw_ns::OVER_GRAPH" )) {
			legendFrame = GD_AddElementFrame( .SetLegendPosition,  plotRect, .SetLegendWidth );
		}

		xAxisSide = "GraphDraw_ns::BOTTOM_OF_GRAPH";
		yAxisSide = "GraphDraw_ns::LEFT_OF_GRAPH";
		y2AxisSide = "GraphDraw_ns::RIGHT_OF_GRAPH";
		if (!.HideXLabel)  xLabelFrame = GD_AddElementFrame( xAxisSide, plotRect, .SetXLabelWidth );
		if (!.HideXAxis )  xAxisFrame = GD_AddElementFrame( xAxisSide, plotRect, .SetXAxisRectWidth );
		if (!.HideYLabel)  yLabelFrame = GD_AddElementFrame( yAxisSide, plotRect, .SetYLabelWidth );
		if (!.HideYAxis )  yAxisFrame = GD_AddElementFrame( yAxisSide, plotRect, .SetYAxisRectWidth );
		if (!.HideY2Label) y2LabelFrame = GD_AddElementFrame( y2AxisSide, plotRect, .SetY2LabelWidth );
		if (!.HideY2Axis ) y2AxisFrame = GD_AddElementFrame( y2AxisSide, plotRect, .SetY2AxisRectWidth );
		
		GD_AdjustElementFrame(.SetTitlePosition, plotRect, titleFrame);
		GD_AdjustElementFrame(.SetLegendPosition, plotRect, legendFrame);
		GD_AdjustElementFrame(xAxisSide, plotRect, xAxisFrame);
		GD_AdjustElementFrame(xAxisSide, plotRect, xLabelFrame);
		GD_AdjustElementFrame(yAxisSide, plotRect, yAxisFrame);
		GD_AdjustElementFrame(yAxisSide, plotRect, yLabelFrame);
		GD_AdjustElementFrame(y2AxisSide, plotRect, y2AxisFrame);
		GD_AdjustElementFrame(y2AxisSide, plotRect, y2LabelFrame);

		if ( .SetPlotBackgroundColor != Null ) w.DrawRect(plotRect, .SetPlotBackgroundColor);
		
		tk = (plotRect.right - plotRect.left)/8;
		st = plotRect.left;
		xticks = [st, st+tk, st+tk*2, st+tk*3, st+tk*4, st+tk*5, st+tk*6, st+tk*7, st+tk*8 ];

		tk = (plotRect.bottom - plotRect.top)/8;
		st = plotRect.bottom;
		yticks = [st, st-tk, st-tk*2, st-tk*3, st-tk*4, st-tk*5, st-tk*6, st-tk*7, st-tk*8 ];

		tk = (plotRect.bottom - plotRect.top)/7;
		st = plotRect.bottom;
		y2ticks = [st, st-tk, st-tk*2, st-tk*3, st-tk*4, st-tk*5, st-tk*6, st-tk*7 ];

		GD_DrawGrid(w, plotRect, xticks, yticks, .SetXGridColor, .SetYGridColor);
		if ( !.HideXAxis ) GD_DrawAxis(w, xAxisSide, xAxisFrame, xticks, .SetXAxisWidth, .SetXAxisColor, .SetXAxisTextFont, .SetXAxisTextColor, .SetXAxisTickColor);
		if ( !.HideYAxis ) GD_DrawAxis(w, yAxisSide, yAxisFrame, yticks, .SetYAxisWidth, .SetYAxisColor, .SetYAxisTextFont, .SetYAxisTextColor, .SetYAxisTickColor);
		if ( !.HideY2Axis ) GD_DrawAxis(w, y2AxisSide, y2AxisFrame, y2ticks, .SetY2AxisWidth, .SetY2AxisColor, .SetY2AxisTextFont, .SetY2AxisTextColor, .SetY2AxisTickColor);
		GD_DrawGraphic(w, plotRect, :Red);
		
		if (!.HideXLabel)  GD_DrawLabelElement( w, xAxisSide, xLabelFrame, .SetXLabel, .SetXLabelColor, .SetXLabelFont );
		if (!.HideYLabel)  GD_DrawLabelElement( w, yAxisSide, yLabelFrame, .SetYLabel, .SetYLabelColor, .SetYLabelFont );
		if (!.HideY2Label) GD_DrawLabelElement( w, y2AxisSide, y2LabelFrame, .SetY2Label, .SetY2LabelColor, .SetY2LabelFont );
		if (!.HideTitle)   GD_DrawLabelElement( w, .SetTitlePosition, titleFrame, .SetTitle, .SetTitleColor, .SetTitleFont );
		if (!.HideLegend)  GD_DrawLegendElement(w, .SetLegendPosition, legendFrame, .SetLegendBckgndColor, .SetLegendFont );
	}
}

