########################################################################
#  __  __    _      _     __  __   __   _  _  ___  ___  __  __    ___  #
# (  )(  ) _( )_  _( )_  (  \/  ) (  ) ( )/ )(  _)(  _)(  )(  )  (  _) #
#  )(__)( (_   _)(_   _)  )    (  /__\  )  \  ) _) ) _) )(  )(__  ) _) #
#  \____/   (_)    (_)   (_/\/\_)(_)(_)(_)\_)(___)(_)  (__)(____)(___) #
#                                                                      #
############################## USAGE ###################################
# This makefile is controlled through a set of variables, similar to   #
# any other makefile. The prefered way to change them is via command   #
# line, e.g.: make PKG="ide usvn" CXX=g++                              #
#                                                                      #
# All of the variables that can control the bahaviour are listed below #
# in DEFAULTS section. Also their default value is shown here. Notice  #
# that many of them can contain shell commands (enclosed in ``) which  #
# are evaluated before parsing and building each package.
#                                                                      #
# For boolean type of variables value "1" represents true, anything    #
# else is evaluated as false.                                          #
############################# TARGETS ##################################
# This makefile defines five targets that are meant to be used         #
# directly by user from the command line:                              #
#                                                                      #
# all          - builds all (default if any packages are specified)    #
# help         - shows this help (default if no packages are given)    #
# simulate     - prints all commands, without executing them           #
# clean        - deletes all compiled files related to given packages  #
# dist-clean   - deletes the entire OUT directory (including parsers)  #
############################# EXAMPLES #################################
# Typical usage:                                                       #
#    make PKG=ide FLAGS="GCC"                                          #
# More complicated usage:                                              #
#    make PKG="ide UWord Bombs" FLAGS="GCC .NOGTK" ECHO=1              #
# Show help:                                                           #
#    make help                                                         #
# Silent mode:                                                         #
#    make PKG=ide SILENT=1                                             #
############################# DEFAULTS #################################
# List of packages to build (space separated). If empty, this help     #
# text will be shown.                                                  #
PKG:=
# Paths where to look for packages.                                    #
NESTS:=uppsrc bazaar examples reference tutorial $$HOME/MyApps
# Building flags (as in TheIDE).
FLAGS:=GCC
# Additional include paths for compiler (without the leading "-I").    #
INCPATHS:= /usr/include/freetype2 /usr/include/gtk-2.0
INCPATHS+= /usr/local/include/gtk-2.0 /usr/include/glib-2.0
INCPATHS+= /usr/local/include/glib-2.0 /usr/lib/glib-2.0/include
INCPATHS+= /usr/local/lib/glib-2.0/include /usr/lib/gtk-2.0/include
INCPATHS+= /usr/local/lib/gtk-2.0/include /usr/include/cairo
INCPATHS+= /usr/include/pango-1.0 /usr/include/atk-1.0
INCPATHS+= /usr/X11R6/include /usr/X11R6/include/freetype2
INCPATHS+= /usr/X11R6/include/gtk-2.0 /usr/X11R6/include/glib-2.0
INCPATHS+= /usr/X11R6/lib/glib-2.0/include
INCPATHS+= /usr/X11R6/lib/gtk-2.0/include /usr/X11R6/include/cairo
INCPATHS+= /usr/X11R6/include/pango-1.0 /usr/X11R6/include/atk-1.0
INCPATHS+= /usr/local/include/cairo /usr/local/include/pango-1.0
INCPATHS+= /usr/local/include/atk-1.0 /usr/local/include
INCPATHS+= /usr/local/include/libpng /usr/include/gdk-pixbuf-2.0
INCPATHS+= /usr/lib/i386-linux-gnu/glib-2.0/include
INCPATHS+= /usr/lib/x86_64-linux-gnu/glib-2.0/include
INCPATHS+= /usr/lib/i386-linux-gnu/gtk-2.0/include
INCPATHS+= /usr/lib/x86_64-linux-gnu/gtk-2.0/include
INCPATHS+= /usr/lib/gtk-2.0/include
# Paths to libraries for linker.                                       #
LIBPATHS:=/usr/X11R6/lib /usr/lib /usr/local/lib
# Directory to store intermediate object files                         #
OUT:=_out
# Directory where the resulting binaries will be stored                #
BIN:=$(OUT)/bin
# ar command                                                           #
AR:=ar -src
# Command to create directories equivalent to "mkdir -p". The only     #
# good reason to change is if your platform uses mkdir command which   #
# doesn't support the -p option                                        #
MKDIRP:=mkdir -p
# C compiler command                                                   #
CC:=cc
# C++ compiler command                                                 #
CXX:=c++
# Options for C/C++ preprocessor                                       #
CPPFLAGS:=
# Options for C compiler                                               #
CFLAGS:=
# Options for C++ compiler                                             #
CXXFLAGS:=
# Options for linker                                                   #
LDFLAGS:=-Wl,--gc-sections -Wl,-s -Wl,-O,2
# Additional options for speed optimization                            #
SPEEDFLAGS:=-O3 -ffunction-sections -fdata-sections
# Additional options for size optimization                             #
SIZEFLAGS:=-Os -finline-limit=20 -ffunction-sections -fdata-sections
# Optimization, supply SPEED or SIZE to optimize the executables       #
OPT:=
# Platform flag, added to FLAGS, can include shell commands            #
PLATFORM:=`uname | tr a-z A-Z` POSIX
# Suppress all messagges                                               #
SILENT:=0
# Print each executed command                                          #
ECHO:=0
# Use dependency files. This will probably work only with gcc-like     #
# compilers (requires -MD option). The build usually works correctly   #
# even without specifying the dependencies unless you modify included  #
# files (*.h, *.lay, ...) without modifying the *.c/cpp files that     #
# include them.                                                        # 
DEPS:=0
# Run the executable(s) sequntially when compiled                      #
RUN:=0
# Override default name of final executable (absolute or relative path)
TARGET:=
# Add flags from based on mainconfig section (1-based index, set       #
# to 0 to disable completely                                           #
USEMAINCFG:=1
# Number of parallel processes to use (like "make -jN" option).        #
# The JOBS variable must be used instead of -j option (as -j would not #
# work as expected). Default value is the number of cores (if it is    #
# possible to detect) or 1.                                            #
JOBS:=$(shell echo /sys/devices/system/cpu/cpu[0-9] | wc -w || echo 1)
# Ask for some additional details during parsing                       #
INTERACTIVE:=0
# Use colorized output, recognized values are 0, 1 or auto             #
COLOR:=auto
# What color should be used in colorized mode, number from 0 to 7      #
HIGHLIGHT:=4
TIME:=TIMEFORMAT="  time taken: %Es"; time
########################################################################

m:=[ "$(SILENT)" = "1" ] || echo
e:=@    #comment out for debugging
dbgparser:=-DflagDEBUG -ggdb3

thisfile:=$(MAKEFILE_LIST)$(.MAKEFILE_LIST)
color:=if [ "$(COLOR)" = "auto" ]; then [ -t 1 ] && c=1 || c=0; else c="$(COLOR)"; fi
pass:=$(color); UPP_NESTS="$(NESTS)" UPP_FLAGS="$(FLAGS)" \
    UPP_INCPATHS="$(INCPATHS)" UPP_LIBPATHS="$(LIBPATHS)" UPP_OUT="$(OUT)" \
    UPP_BIN="$(BIN)" UPP_AR="$(AR)" UPP_MKDIRP="$(MKDIRP)" UPP_CC="$(CC)" \
    UPP_CXX="$(CXX)" UPP_CFLAGS="$(CFLAGS)" UPP_CXXFLAGS="$(CXXFLAGS)" \
    UPP_LDFLAGS="$(LDFLAGS)" UPP_SPEEDFLAGS="$(SPEEDFLAGS)" \
    UPP_SIZEFLAGS="$(SIZEFLAGS)" UPP_PLATFORM="$(PLATFORM)" \
    UPP_SILENT="$(SILENT)" UPP_ECHO="$(ECHO)" UPP_DEPS="$(DEPS)" \
    UPP_RUN="$(RUN)" UPP_TARGET="$(TARGET)" UPP_USEMAINCFG="$(USEMAINCFG)" \
    UPP_OPT="$(OPT)" UPP_INTERACTIVE="$(INTERACTIVE)" UPP_COLOR="$$c" \
    UPP_HIGHLIGHT="$(HIGHLIGHT)"

all: no-package-specified build

do-build: $(OUT)/parser $(OUT)/brc.sh $(OUT)/color.sh
	+$e set -e; $(color); B=""; N=""; C=""; color=""; \
	[ $$c -eq 1 ] && color="$(SHELL) $(OUT)/color.sh" && B="\e[1m" && N="\e[0m" && C="\e[1;3$(HIGHLIGHT)m"; \
	for pkg in $(PKG) ; do \
		$m $${B}Parsing package $$C$$pkg$$N $$B...$$N; \
		$(TIME) $(pass) $$color $(OUT)/parser $$pkg; \
		$m $${B}Building package$$N $$C$$pkg$$N $$B...$$N; \
		$(TIME) $$color $(MAKE) -j $(JOBS) -f $(OUT)/Makefile && \
		$m $${B}Package$$N $$C$$pkg$$N$$B finished ...$$N; \
	done; set +e

no-package-specified:
	$e if [ -z "$(PKG)" ]; then sed '/^$$/{s/.*//;q;}' $(thisfile) && false; fi

$(OUT)/parser: $(OUT)/parser.cpp
	@$m Compiling parser...
	+$e $(TIME) $(CXX) -x c++ -o $@ $^ $(dbgparser)

$(OUT)/parser.cpp: $(thisfile)
	@$m "Extracting parser..."
	+$e [ -d $(OUT) ] || $(MKDIRP) $(OUT)
	+$e $(TIME) sed -n 's/^#://p;' $< | base64 -d | gzip -d > $@

$(OUT)/brc.sh: $(thisfile)
	@$m "Extracting brc parser..."
	+$e [ -d $(OUT) ] || $(MKDIRP) $(OUT)
	+$e $(TIME) sed -n 's/^#~//p;' $< | base64 -d | gzip -d > $@

$(OUT)/color.sh: $(thisfile)
	@$m "Extracting colorizer script..."
	+$e [ -d $(OUT) ] || $(MKDIRP) $(OUT)
	+$e $(TIME) sed -n 's/^#%//p;' $< | base64 -d | gzip -d > $@

build: do-build
	$e for pkg in $(PKG); do \
		if [ "$(RUN)" = "1" ]; then \
			for target in "$(TARGET)" "$(BIN)/$(TARGET)" "$(BIN)/$$pkg"; do \
				[ -f "$$target" ] && break; \
			done; \
			[ -e "$$target" ] && { $m "Running $$target"; } && $$target; \
		fi; \
	done

simulate: $(OUT)/Makefile
	+$e for pkg in $(PKG) ; do \
		$m Parsing package $$pkg ... && \
		$(pass) $(OUT)/parser $$pkg && \
		$m Building package $$pkg ... && \
		$(MAKE) -nf $(OUT)/Makefile; \
	done

help:
	$e sed '/^$$/{s/.*//;q;}' $(thisfile);

clean:
	+$e for pkg in $(PKG); do \
		$m Parsing package $$pkg... && \
		$(pass) $(OUT)/parser $$pkg && \
		$m Cleaning package $$pkg && \
		$(MAKE) -f $(OUT)/Makefile clean; \
	done

dist-clean:
	@$m Deleting $(OUT) ...
	$e rm -rf $(OUT)

parser-clean:
	@$m Deleting parser files ...
	$e rm -f $(OUT)/parser $(OUT)/parser.cpp

.SUFFIXES:

.PHONY: all help simulate clean dist-clean parser-clean \
        build do-build no-package-specified

### PARSER CODE (gzipped and base64 encoded) ###
#:H4sIAO0CPE8CA7Qc/VfbRvJn+l7/h0UlWMLCNum79ooROUqclnd8PT7apMClsrQGBVlSJNlASf
#:jbb2a/tCvLDum760uJvTs7Mzs737vkuygJ4klIydYkiYoy7Nxsf/vNd2owKB8yWhtL6J3xvSjz
#:KLmuAQGqOBrODkYpG/v2m5KOs9gv6VYQ+0VBzmAwSuIooWSaRiE5HPw2OLHPSOE8fvvNUjSy+Y
#:elUQbESvhahjTPXWtwcnJ0sklO0zEtb4ANUt74JSlu0kkckoROaU5u/CyjCQ3hQ6G+dDqdy8Ry
#:+oiT3kelvcE+f/72m8/9OezxT7/RoExzxlQChKK/qOvHcRrg6rM1ksHf2WQYR8EmDHBg29lEOL
#:vnuITBsk8Z/CTiv8cTyiBeOn3gYOlJriOL/5PLenyZkB/y9Qstd9NJUtpOkCZFWVuW03KSJ4x5
#:feHZKkkzmvtA+uLKRjSJ07gwu0iu9IWcRuNyPjWzEGB3wtDmZ4qnC6xse0w4DsGxJSmRNT7IDk
#:pgWbNBBe2sjQDttkPO5NFJtIqfe4c8ErGK0fPu+6QCPE+ijxNagU8FP8B6lhbemygJ7SknDTzC
#:0LYHZ6b2AgNXOl9IYap4QSwMg4aei4MrMpwvgkRerx9tsaOIYDNsDqlNPS+7iK4UuYhR+qyRW9
#:+QpJjFCIEhzpgmpmTVgEYWxnTCbHYJpBo569tPZzbf9hLOM1BFPSMesc/WnJxyXc5cmF5DuHRk
#:nzl8HZuS62AZWO0UrKmyia2z7UpdPCEjbQqOQtkiN7xT5mYIbiO48fO6qfFpMJnNupVk4CzycJ
#:LZluWAPnyugDlV/mUVXA2sVcBFJ3OcWWBOuuBkKmBAzDE/KT5mjHWUU2pn3FTFJgyL4QQMu1lg
#:esM0jcleMRhn5YM9C0+aTX4NTs8jPfLpEwHW4XyAITbCcOpblIw9zUWuWGJrJTzRkMzny1wrT6
#:CuD9rJNKytoPGsKqGoca9+ZjVmJKJlEEUwzkCTAWgBHo0dA1MTHskRM83dmPpf9ua6jhC0skpt
#:+9KhVH79uSeujrlR0u3ZvTE/UekiLBa8CDQz00U1jdsmbcIc0xJf5pdR8D7wi3KLHcO2XfkNjr
#:vNcAi/wcP+siAzpuNxOgWBtBGSSdXl0EY4gMBfSFfYtEGg+8x9PZvll438Zhc4fYVItO/tDRzp
#:PZvlutoKT07sjCx7qHzck7NtrQVp9lCpihDMklQj9gU3hWAzAcTgAmWym44zP6cmfVeKy1vfUP
#:FcwwIzr4B8wjW/wGgA+Y60hGImHu6DYDUKJDCQVvFJnQzEuWgbo+T6uiOjI4ZGzwtq0XEmMNZi
#:cM0RqGCPKiXpCRFKFfFMBTGjNgKs4+IqgmLElcJoR1wcGB0W8yli20EUalEAFDEvXWKo7HV5Ux
#:2Dzr+uyutspUxbYGyrJ6O/mT0Ta5Dnab5J9pKpH4OjgtP3IZGmeUHKFNlZFimyniMvfe5LjWSE
#:0Di3OW9kdVVwud3j8uCs8TEWzJfkZrmJME1l3hK/wYdmCxxzAwQ87Q3T9NRacBZB9mAzH4EmKs
#:SH6ihxozmiLbYuey39IJQRwJ9RHtEklNmGciM1NxnfFPJk5FB+w1VHIMBzkau3nr0aRSuS6r/H
#:AZ6z2JXIRAAQfLKHs0hA4f8bDGrIAaIj3cWTZB7PV7B9Qv3wNz+G7FpFFpeZe0jjaLyBh+C2tJ
#:GXfERVe54HYU9ajWX1KyPJ+7L2uo0yj7nVu5soprZdXOAQ+AVBA5McPoQpjiBTDW553790UGPF
#:92WP6yx+abcRL4tsHbRKHGOnyzKDj97IjwvaF7xe9IBm69Li3GurhL18hIEyn1CpZbozCmSwQM
#:/SB3/eJ4EsAwD3WqDvRn1j27A/IvM4xmjjl+BiHYLNMmr4JYwMIXDd9hWqLc/++Kq3CbtmDqSM
#:Es7TUo76sRYorzmyPzrIhpQBmxFnkfdlWs5EsQt7mYyNU9ZdLST0UcprDxlFpJ8VU1KISpvEBI
#:sjntery1TZs+BHF6wYkofD2aTJZEyOsvLx8Ohw4JLT48HgNfy198cA5+XsKfgcCsXi+eG/D49+
#:P3TJ4ZFL3g1OCUcCTE8CjCUxRX5gAdhOqWllAn4TnI2fXOMgwkHVDyA2UoU6wpTaXnGaTvKA2g
#:i4SkZKQFh2jjqIrKNiZavTklJahnlH27xSQ8EFvS9BUAIBSgvg21wLzcgFgJ0ql1ThC4YxsJZp
#:nN7R3OZfBXGCX9UpWUGWWbx0gFlMOEEjDYDoixBB8IX5+3sBIHo/HZSvx8YbVYBQEAeZZbUZS/
#:BVSIZ5Mxoc/yp9ZBXBKZS0N7SwzbRbPyMCtbl+RCTS3ELB0h9u5Oxzq9sy2ldCX0FP90o6fqw0
#:5O6G1+TiawSz+HU8Kf1hTCtLwBjM9iFQYA8Lh2xhIDMqvZ/6IcBqW3K1UpCs3dIHVxb4Aicr84
#:nw+NKRFC5AOiLJrbwrafF8Ysa51valLbGFP17COY+nG1q61NMGpnE1gIdgeGiP4VauWaTfmNlw
#:D7kk3CsqBxJFdGpGKJOcdiRPsH4ar68LKJanIROoXprbFvm6+Il8qO33XOUJm7wjWxGmglkh8F
#:Uy9qYd1gjjC8cdgVOJD4ZQJ2CoiuCFi5GZT0vF5WCCFo+/KHa2SQn8XIsQR/izX9BDcFyNFal0
#:joXmF7tz/WKhBazCdIQGyddR/j+iyFMUg2TPRRhF0kzr0FxYlDBJj3is1FMdZj7Di41er8e6jW
#:/29gdrZOSNIHlL7KdR4lq5pdga1ZIm1k7Ss6TlEfbpRg7Xw6TtQQbuh/bQ3XCRhDsSZ9f2huxD
#:t4tVIoE/Prnxg1u06jwHOybROIvpmCaYracJueMt9xToUQr5b8nQeLmQReLUdCCXGaMpGHB5g2
#:RqWGBi5hSYGWpCymzr/Pj4PRdB1vaYHusLcu8aShrAyTM4Sf5Vvln0a/7yPMseazE9pEWQRxlL
#:ScIo75vRv+bQcBgBCezoFn8Ocz8Hv+eH4Sj2r8ElQlEC3LhkUlBWWbObEZDppCjTsYaRs7BN/C
#:Cg4FUBYnR9y35OXcJwacCoSNtkBD/ZKPyBjbBWqJmBsGFT4TI4Uv+aIixu15bf3WcvdY3ereB7
#:FZSgKLmFaFyQR9R7ScTlMAs6bkB0lUwc8xIB+fS8CUty2FoGVe+eiKWPvExEHwQx1Gh8aIU3xt
#:nYhzOxhXVx69DNkAcKbkkzVYCwrQ3ZvgdQTOxHcNSBLSwKzRNy9cHRG5a8L7PsHZP3fssxfD7C
#:sdrkUQWX5bxTtXphWX6Ra7kB5PzLVYQU6Tx8FyHESPVFfiMIEZuHJagfWOlelQ6C9kdv+WNfC0
#:GxrAYElWCmqcSEJTVmlfm5v6E33DnhQQto3nZEV4g3cxd4TIc7B4P3Bztvr/Q8ILgLgUWU+11o
#:I6hLdFjRvgQgYN7qWvrSEY+AQgPsw/P9/dmmD6RljMPm1GwJPARejzAQyMt4ItJtvbKsTSCKvV
#:E5BR+BPvzUN7g0wmCMSOSsCorKUGGmM4HUWixANWORQAsETGdGulJ9FqnR8ugLnaBjToa8KJgr
#:H8EWw+XLxHLJk+SgoSE009Yx7QHzk8rENHuwVdYIHs7izrOwXOFGHTAUBonFgQGJ7tXiXnYREP
#:O+lvLD80GZQ7UqPz0fkvtvSzry+YDo4C3u5+cDCf9vqUjgiLhsmqmWHFtaPLIc5SKMXMW2Li+/
#://FHqQvi7lJ6h0JLIXEYFerSsvqLyfI4xOXkKPcQpjKbFXGKJZda5uhIHubliPMpJukwjsq/qk
#:12uyS6TtIckguwSFDPu8UIxj4INU1G0bXBsfy0hBF1Lr9CgzV0xMJzJNrIJV4oSnht3FOSRxrT
#:/xmNr5ch2tE4+ou+LzLIyQATRwTDoASsEyKM+UvL4Ud99d4fg4WLMR2pDq/SFExWyEiKgPcq6u
#:UGaSkZsVBbUOxMY3SvQq6S31rBm3g9jIJuVWApj1TmC/AbXJf5XJkxXmcEp1V4c5DoktNxKPHN
#:Q6H2rC+vBCGrqqpI5A5eQaBQVJ9p5GhiESUcF30lCJY/MmUdOTXMX695PKHVPNRMJd9QyxuFKs
#:egV6uzxXtTtd9Q0jcV9cVsRW/W9Iuq+kV1fa2yX1DbVwcn/1b1+GyNL2FUfV4r+GtHIas8vqiW
#:CIyCOK0C8cxtYL1k5R2rDLyxLU3Kradt/OmMUBMtOTIS6akfz7NEfPHix/pCxjlznuKZDsyrN1
#:paDf8GYhLU8XZzOsn5qhVVLEftdgtWwULoLWjOStgizbFqzTviLc1U52e2iTptaqHmTGOnsm+K
#:kYot+eBt9MkHcw1ptz8I7avfCTxNLz5cqboj8j7wy0IhYbwP5XVAdKValIGz3ZO6DBPtjSsP50
#:WyJTSSp+p8NqhdPxYAz3sM1T43YJ950z6Ltmd1rLakoDVePssXO8d+DpLV5A8VwTbJbnntKohi
#:lG54M6fOiuXLouR1iSyjIaMreP4H7pSh45eGRKis6LLvhWwbgWPcWEPRsw0267OaJyBb8PmvFg
#:u8YmZHm/mDz3Azf9/SoHoa1E8t1d7gAevAL4MbVE2tH8qytNtr1cXV3OWydPLqKUmFoHBxUX92
#:kV3lNYzoEL0CW3eU66v03MSRuYkgNDTKg6IqMw12VLCRlzg9TRmZmAt2t+qoS1/hKmWbOWzyaQ
#:1tS8EHO2Wey0aho7+6U5xIFf0AvHzY4nqh6+kH7UbeBlF4Xu/TJ9S9C/hx1ZH5KqPBV4PBcVJw
#:quEsB9yT1tmQKsUprK5GoedZBzt7h5ajXSprOrEDGOeoRO0Q64fPpU2EuHtXDr/LZNFvuaV9sV
#:u1JHJ1dSavXJUK10gPRTDU9zds3gzo2fP2grue2YrGzqdPMxx+WswhAC/mcADxAtIJERdUYgH+
#:YsYQYazDbjeWPXm9oWu/mva8d4PT/uwbhnpyAQzjGvPeQCojZAzb2J1xSFFdu8o7b9uxRCJREZ
#:U0Z3Tvc4OgTctnCaFm0897BfL7r4NDwl91b5IXBVb/T3I/86r/it3hK2B48/Co8XBYKgFW+ppm
#:Rb0tpB0I2ik3Pmw74kxlghwlw846TFCzU3QvbA3LFju8yXh77YpuEgOuxZVJw3sehqqDJXtTxE
#:PGpFJVkBD/XEZa78fJvGvCGDKAtXsTk/ikkaaU1UQmFFq8RmbES3Ej+dGu16SquzVZ53QU3Tc0
#:Ob+Q4DzW5TAV25cbziErIFab429P5X7ndAmlQiA2tO3CNliajAPeOMILAev8dIB+dffNL5ZrbV
#:jVMy2uC0UR+MnIfoJFrvUitNzVpHq5jW6/d9VhFX+1JU+qVP2XCn7380QoPwlTWiStEkpQyLrL
#:lAwp8VnSIht3HdEdEzSqmkreT1QdYyBCcz8ooynVNrZ3eDY42dk92/ttADvrWcAX7E+9sVrWVs
#:lwn3jJq2R9Y1MkherO2tZhH1WTd87+Zckidm8dTOIywoyYd00mObvYKYg/9aMYr4ddkEKMVz9p
#:QtVvT8gMVdZa7CFLtDWHpvbWXNEl5EXkkNaLorXJfqJAIUF1n3QcqGj6gMqwTUxrDtllhSPPGI
#:mNv8ACgid+QQo4MSp7CeAz4qgoHW0fEss7qJnFTrEquHgRXm0iT2alRWrSA0sX1ziS9DyS5OLS
#:urQYTkdvro9G8aS4wd/mqB54Dieji5f/+EFk8XihUNgw5hIYhOMowyhR7VR8j8fe1gCAU73z5o
#:bBFjHDIGAZquZNZKVa2xToJ6wQgsGKVKgawOkJY4KZMCtFErJF5umZeoZqnF9ypeyTQ/ASM3N5
#:C5a/oPWs84I151nnsakdP5P5EaViGfdGPLsTlZA8LhHXMucrccrsVHX3O6r0F0kj66AIENHd0I
#:9ZyqAC1vLFmgOuBRbNBz87/UWGI/B0qAqMdLQw+ZUGJSArJiuwfgMDCnO4iBUZNerQgNWNBN56
#:qU7H6rbza4lWrafFhJ2qfdYAwAKYzLJVJ07o6hxwceyuYl95KtWj+SIOlxiHYHoKQw5f2LzEKt
#:UVNUHyxVXALH/M+8IGVahpwmfpEIx4zu44jHAue6KeDHxHx2dfqfXaCQE2z8NLZXQ+EnVDcEO3
#:qCh7FuvdWnU1R2R6V1c9AdNX7v0xaF6oWrmfFyipuIN6vo6KBaaKIm7VrZmF5MmWIbyZdvjUW9
#:QKn+LDW9QQ/IDXEWbDEvsuekuu1iheLIDkdq6Hmt18cmvuXPZ6mAbWwPS3SEIPee/JKMswaWOl
#:4yb7aMvvXEeZLUrNPBycnp1CMjbJsiIPyND/y4dYDEktzWkCAb2cgI+K/JjQex97iAXp3qRj2r
#:3pHjzswBrLMUoPE/mb/Z1fEPkvu7vkl/M9hNUs3IQ93t85e3N0cgDgx0ene2/J/t7h+dvaEvxf
#:1gm4KT6qJdXqOzdKteg4TwNaiBFlvfoo7wNXv8EL1kDFL/AKdWKC5inXaUmzxqdU8m5+HMrmot
#:mLfyr6UAbr754D8ab6kvfYLjbkC2vTO2m/bQFZ/4p9vHP2q2O5P1YPh5eAKGQBKysjccMZtL0f
#:akmzgeL13glg+GEGw59hlLOrKkD1Z4XrH4tw4VOCRnb+HPoFbcC2kLOzvTOG7p+L0RFI+SDTbB
#:Xdi87VxX86V2sr3W5LI/LjIiJH52dcAj/NytD+ee/Q6VaI/qkhquBYQ6PbXVpasaFa2z9/PXDc
#:FXvZIbQMOuxRgXo4Bmw+0NJ8FsaVRG/wc+U6mcTylTnJJ1iLNLcPqpfQmp/DBU7f0ESvrrg1aI
#:ffEfAbZxL7QAqS+JJdPbOLgyiIygfxMhrwaQ90xDtms5Vqvsrjr4vBxUKlvM5eMxhASysDEoRk
#:xYZS+va6bb0HL4RNOUu8lBb/WTS4ScmlhZ/B7cQPbG+8BhlOojgkEj1UCjQj9eX2nSx01Ru/BF
#:jPaB6xd30xGVEfOKLOpdWvr27jaVt9yKJrO0qL8v+6JYn//76nL7HOdGGExeWa1YbNt02EVpiS
#:L+6G7QGKTDRcfe3f3obYAgmhRhcb+ayenfOouLmpXLxmMRDr0klZJWfnZxB0uuU4676Hccsx7m
#:xuKd4We3xN2+oeiBGreqE6lk9UJbRr3VXvVMfiIZIsx974ABFigwXXsLeMovVIniSCpn+tgf3K
#:lkAyxgr3O3JWCcyHOD3GeyE/jh/INU0oL8MlRnaCLwrZygFypj4gunfpxPz3JNjzVmB0nIbR6I
#:FEJf+3JBijIvjKHnRIM63R83pwfFrr8DCoII3TXIPbPdo/OqkByosUHoiLhpeiMMUAjfwBPDDG
#:xFPIGGB+5g5z7ms23lvjtLCIXt+z2vLlWgMSAH0WCvjOEVQ7gowy88ubph3FasLc1P7ez3JTHK
#:RpX3ymkStJknG1b7U5qGIMc5z3Jcn9O/zUFyP2qhhw1KPsEHTp4id+YyoeEJfjNYLPO+IUVG52
#:WSE0FVe6QPz1cPxusHPivYjY54Ojw7Nf5ZfXO+/kx1+PzisYSADPBvLb6WD36PA1fLPcmuaScn
#:27HL9/oH7e3vip13PFwBifJ4uPof8gP4OC52o8UiAFDaRCG1YG3mHTY/ZZNxjIEebM7LLEd97k
#:27eLpllxthAAirBF8/sLV+/uzmdrzszOyZyJg39DAnU8Z3Iwb9E8+vOkPGd8nuzHgbdyIAIRvh
#:eIYrS9ld2VrZXDS6tpgc8XeNtk5eddqAFLXODnwU00pSuHuPRfc5YGQGsA0XJ31yHrAVm/JwH6
#:2JUtsp6SlX/hzPExOw2HNDIb3N8LDG/fKhTt9tchka5nnj4IHzJnOqQjfxKXmzxKNwB0jn89On
#:y3yYN4EFMINgFKiUKZUMgQL7BcJhgeNAxPPG5CxJAuDazGEum30x1GCbg2HV5FBlk7rh+9nAci
#:DImh4/DOHNDKqBjG78n6aDRJWNN7XfwWZgFj4Kx89X0eKml+DBOu4g8xIFEbR6X331KOZbeNG3
#:j2XxCEhWizeqY5Cd0mrmvEARwESF304LiFokiuWksWJKVuD9G3d57kkLtrt/XB8Io7MySHS86b
#:L0ZPoH0Rx/jzba/fv5kZCtgi/973Wnlyytw4RU4krOJ2+MxaME9QDsNR399h+Z/B5V0OL1d/YL
#:p2f5MSULCz0/P3RpJjHrh/7Zsgf8Qs9csE9jVGev2kS/oB/CRlsj9HEviY9shA1rAuMA94fvWN
#:L7WP87dvzi/gD7t56YvSr3wx8aC51OgQ5njl6a1pGnGTgQcV55Xvv3v3A8OSZMsaLTS9PujmhE
#:cVxla/xNJReCenDTyBGcMVNaj881NrxQxuwHquVqtPsWZFBrca1ZcY/yUa2VXMx9cYu3o3P/2O
#:wZ2mUPNGPdipM1TKq+7nGMIGNX/O8cH19DaoeW5/v5wBw0DbXCz/IpgZDMDdL/e/OeDJlEKJrO
#:kMBqD0YqQSoLYYpPw03wM5t7u7/YKb5ZWE6SsTNtapah3SEvbYW/HJAmj5KGxqEw0B1T2EK+VR
#:gJo5flNXYXsIgQij4oQg1HVE0IQ5LeeAD6GisQ19qUmCDS71RK/pYM7+oRumVMU+gFyJ4q5EpO
#:R+KQJG20nOb18uHgPeILCucuF8iRNDhKLOF2cYQym6VqeNPmT+kKWgvEowlDNYnmLdt1r+6OMy
#:wjRoAhzHNtUkVO6MQUWuhBavcsK8425nxwQ6u8HdxNFv+i5Uxh6lzADLuruaFW3vzsDucioTt7
#:MB/vrWfeeSfuCoaMevqRA5aoM2QTj8LGI7o3ygzJIDs6j3X36qt1zOCvySWzhf+sGdb67f4lBp
#:8HL1FnqUxGUC+QGT9TFfv/JmVs7HvH2X4OQYKXwefCH1oSBPmx9QsnwYs5JO4UFHCOAYrLHQJl
#:z1KHUL1UaTh8AvtO2rToMdVYFqoYkLdLgcd6NeVGTzUUTuqYanSpCihcKyqrbDXCnXNDh4ArKB
#:xSA6dXMJOjsRWGUMdWELWyQmlAyhI0C6gr+0SrB69vlZfF+FGmTsM7I2RQuRp/oxadBMWDMDnG
#:R+s6F6dRbrfF+kKQhPoJMk9QB+ds5kJ1BnV5BpQUfDZh93vd3zvEmwJ0wgpG0tvcWtF27dkEfD
#:+5eo0/GNGMJnVHEkPWGd1dHY8yG8/prJKmDJr6wDTUwC0tImIDULV6mraIxDNkTiGFxicXGX1l
#:5z3Dtcl/ExeLY/ggY4HsVkK/T5kTZXVsaz30wvxsDt8ZmfLg+MQX3FNIhxMgjRJJ80Co2tmrgE
#:bNX/SRDZihT46qMsCp8tve8dQkyDZATRl+Q7Qxs2i1Ti1O+TqH1RiXCcToLQziX2tGh8geL25E
#:NB8vSXYPMeZWITtWj4J5+43BYqin79mCwRHIThFOalUFkWJBgQSKkH+5L+w8Goinh2WxvGrhsy
#:0YQA6ZW3vkSwBi8n4ksEuoGGdM4LoIBCRcbJBaPGzXt58uHN2WVwifP7PFmXW6PZEeO7dfsGs4
#:qEymN5myk45taNwu4OA60BxVxOW1KUJoDEmXAp6hDN2f64MJMJkcSSG5BKi2YqVbYNxTeE0LAS
#:svy8Egika2nFCbltJtZj09mFcANvGHiQzmvYKIwUPvcLHZHX7Pj7C/gGYNUf9pRZFVX0UHF2oB
#:qqLiqSTuz6oDvt+jfbuy8b2GOxfb7+zK0NneBhYdqGzw9qTT8f6hzRJGeb+xCN7oPuKDLS5UmP
#:zTpXIjMnrXxx1pm4nmMMarr9G012shOXYPGCHfsAt9TbwmtlPTay7kmUF91y/84VQJ4ABDc6uT
#:1E8TTy2ZQ9IdQnSwPdrlx/u9DseYJklnHp3WpRxOtP9pyPgg+wGrP03iRo+fPqWu/Fw/d4ScOL
#:xtvQnf9pN72ZT9KQFjpSgMboOin3C3dPckzQbbsENb62l6SMeJD/ABrefDglXgAA
### BRC parser (gzipped and base64 encoded) ###
#~H4sIAO0CPE8CA31UXW/aMBR9z6+4c70GKMGFTpO6iEr0rZo2Td3LWsLAcQzJBk4Um3aj7X/ftR
#~MItGh+IP645/r43HM5ecfiTDGdeidg0kyDFmVWGBC5epCl0dCLSwHzbCkhUyaHXr3Q68zwGCfz
#~vMTgVZEtuclyhWnWmi/kJ0BcT6cu2uW4gnxtirXpCc/T0kAgPZEAmSVZqfhKAu3PiDcfklnMtW
#~x2PLMqcHP128hVAUFi805/uIGnWibgazZutbsTBmwRahaVjPlA53ghRSwrSlnwEgMxVX6dqVYb
#~njzAIfAeoAN8l1vacX/zrQ15/GvokDjpLTYhBhogtE/gGRabDElc2tx4CmG4g17fD15B483gAB
#~sjdnAc3GnjjwW70PpAai7cJJV/krV9/AOKBj6JDIH+R9YH8j7rAgESKeJXOZ/BKUJREuhOojPK
#~unDOFr7Ls5QKlbSM6thHAYFAFV887/rm6+j2bqeNFGkORBusqQCR8hKLMR1PYAhPxAU4KfFlAw
#~L0Yg/yEpK9lUN2aB9xiD84QjfZPeS0MKk9x1lIwobL9Mvo++emWMNz97V2q92ItQshyZsKVLDR
#~7e3oDlMDFegCG1oTrNLQVsuenEEf2u3dvo3TqL77RioyUTWPSLcineRKNuyxDPXbsHmmfLmcOm
#~Al0DaJlaJ5jaP1f33p4JjCF6jwhyMKjyHYYPu4TcrLkv/V1qDodtc4MIHTU6j2ra22Mfs1cHc6
#~5Qlc1e2CC8u696p5MLWRstrEPvY8WwjuqlDl3ZVCoMcciwD15/50fB5cohP9HXb2xgackKnI1z
#~hFH4jw6HlllH2BVG2Jx9QWeQxUQbA0triTA19Y9gEqyVweanuFadbrQNRy3DpRm2HB+11W+I0G
#~W7SqHKP2HXNoBleRt6bnFVeoyFaK5McV2batZj+RCcM/MexbFvp7ScFeYu8FzytXEJQO7P0DVg
#~ZKir8FAAA=
### Colorizer (gzipped and base64 encoded) ###
#%H4sIAO0CPE8CA32PwU7DMAyG73mKn67qLozQVlwoK4inQILDQuO2UZdkSlK1EuzdScth0iSwJd
#%vy/9myNzf8Uxnue+b3W8/JOese+cecv77nVZnrbC3vNVddxTyfhDPKdBfi4ZowNtBFLq5lZVr7
#%l7xlGziSylETlDXQolNNjAN5hJ7gSaKxWgsjMVk3IDI+SDsGxEnhMdHxuOTffvzlFpMK/QJoNc
#%e7lzUa44m1++Sgh0D6hF2IsAijv3tb7ZCwL0RnQPrCzqhATW+RPqNG2lY4o6yzHHmdFSjqrMT3
#%eliS+uRfkTkSMv4X8BT3MKexa5eCZhWQxj77AcUbtPuMAQAA
